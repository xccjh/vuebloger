(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{510:function(a,t,s){},561:function(a,t,s){"use strict";s(510)},686:function(a,t,s){"use strict";s.r(t);s(561);var r=s(59),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[a._v("#")]),a._v(" 背景")]),a._v(" "),s("p",[a._v("SeeAi各端项目是基于angular9~11构建的项目，随着团队人员的分分离离，项目的维护成本较高，基于技术转型的思路和目前的项目情况，在借用微服务的帮助下，是否能用qiankun整合而不是从零重构做技术升级？微服务方案的优势是什么以及SeeAi平台如何做前端微服务？下面来做一些解析：\n")]),a._v(" "),s("h2",{attrs:{id:"微前端用途总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微前端用途总结"}},[a._v("#")]),a._v(" 微前端用途总结")]),a._v(" "),s("ol",[s("li",[a._v("主要是实现了各种技术栈混着用，比如可以随便打开一个页面或者弹框，抽屉，或者一部分页面，就像组件一样使用，这个组件是另外一个技术栈写的，同时又像组件一样通讯，通过props,hook,总线")]),a._v(" "),s("li",[a._v("为了后期分步迭代，同时团队分工开发灵活性更大，对子项目开发技术要求更低，还可以对某个微服务项目进行单独发布，独立运行，ui组合。")]),a._v(" "),s("li",[a._v("提升技术竞争力。")]),a._v(" "),s("li",[a._v("对一些业务相对固定且公用的逻辑例如现在的资源预览项目直接做为微前端整合，兼容升级微前端子项目，多处公用。")])]),a._v(" "),s("h2",{attrs:{id:"使用乾坤技术隐患"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用乾坤技术隐患"}},[a._v("#")]),a._v(" 使用乾坤技术隐患")]),a._v(" "),s("p",[a._v("目前qiankun具备基于Shadow DOM的样式隔离，多实例js 沙箱，支持微应用预加载，支持手动加载/卸载微应用和多应用并行，暂未发现有潜在的技术隐患，子项目可以单独部署与执行并且拆装qiankun也容易，对于主应用而言失去了子应用的响应缺口（可以重新更换），对于子应用而言是缺少了全局数据源管理器（可以重新接入）。")]),a._v(" "),s("h2",{attrs:{id:"如何做微前端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何做微前端"}},[a._v("#")]),a._v(" 如何做微前端")]),a._v(" "),s("p",[a._v("例如教研端，使用vue3+ts+antd技术栈,主项目整合qiankun，有业务耦合性不大相对独立或者有时限的业务需求可以接受主项目的全局状态作为微前端子项目动态引入，独立部署，自成一体。")]),a._v(" "),s("p",[a._v("目前已经整理出一整套乾坤整合的本地开发环境和部署策略，且已经部署到了个人oss做了测试。项目可以使用hash模式或history,考虑目前项目情况，统一采用hash即可。")]),a._v(" "),s("p",[a._v("本地开发是非常自由的，可以通过端口，或者目录分区不同微应用；通过本地服务托管（一个项目本地跑，其他项目本地静态托管）或者本地开发托管（本地开发跑两个项目或者一个项目跑一个服务串起多个项目）。")]),a._v(" "),s("p",[a._v("对于线上部署来说，可以使用同级目录，也可以使用父子级目录区分微应用，还可以使用不同子域名区分微应用。目前整理出的是比较理想的做法，在一个bucket下不同兄弟目录托管的多个项目进行微服务同域打通实现了微应用本地存储数据共享，但子项目静态资源使用相对路径还需要使用代理（oss使用重定向），除非统一静态资源使用oss绝对路径（新项目的方案）。")]),a._v(" "),s("p",[a._v("如果通过不同子域名打通微服务需要oss开启静态资源跨域支持，同时不同项目本地存储不能共享包括登录信息等但可以通过通讯传入。")]),a._v(" "),s("h2",{attrs:{id:"和iframe对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和iframe对比"}},[a._v("#")]),a._v(" 和iframe对比")]),a._v(" "),s("ol",[s("li",[a._v("url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。")]),a._v(" "),s("li",[a._v("UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示。")]),a._v(" "),s("li",[a._v("全局上下文完全隔离，内存变量不共享，不能透传方法到子iframe。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。")]),a._v(" "),s("li",[a._v("慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。")])]),a._v(" "),s("h2",{attrs:{id:"技术升级直接微前端改造的短板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技术升级直接微前端改造的短板"}},[a._v("#")]),a._v(" 技术升级直接微前端改造的短板")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("微前端最好是前期规划好，否则在兼顾旧代码的各种意料之外（有很多外置资源的引用比如百度地图，百度统计等，相对路径的偏差，路由的原子性问题和跨域问题等）状态下微服务的价值会大打折扣（你会突然发现很多意外的报错，而处理这些零零散散的问题也很废时，而且会带来项目不稳定的问题）。")])]),a._v(" "),s("li",[s("p",[a._v("旧项目静态资源使用相对路径且层次不齐，对于作为微服务应用而言需要有中间件对静态资源做代理，经过部署测试相对于oss的重定向方案性能体验感觉不怎么好（即oss部署方案做不了代理只能后台开启重定向回源,旧项目的部署在保持不变的前提下需要在新项目制定统一路径规则）。")])])]),a._v(" "),s("h2",{attrs:{id:"总结建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结建议"}},[a._v("#")]),a._v(" 总结建议")]),a._v(" "),s("p",[a._v("综合微前端用途对seeai项目适用性和目前seeai项目情况，建议以新vue3+ts项目做全局微服务规划和技术转型，以提高项目后期迭代的灵活性和维护的稳定性和可扩展性，去做技术升级。")])])}),[],!1,null,"5a7313de",null);t.default=v.exports}}]);