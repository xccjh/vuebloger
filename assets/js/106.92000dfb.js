(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{630:function(s,t,a){"use strict";a.r(t);var e=a(47),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"git正反向工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git正反向工作流"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git正反向工作流")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git checkout filename 放弃更改，未add\ngit restore filename 放弃更改，未add\n\ngit reset HEAD filename 放弃更改,已add\ngit reset head . 撤销所有add文件\ngit reset head filename 撤销单个add文件\ngit restore --staged filename 放弃更改,已add//Git 2.23以后版本才有，和git switch一起出现增强checkout\n\ngit reset head~1 --soft 取消commit，工作区暂存区不做改变，可以继续commit\n\ngit reset commitid --hard 暂存区和工作区清除，回退到commitid更改\n\ngit commit --amend 更改commit信息，弹框vim\ngit commit --amend -m [message] 直接修改\ngit commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"git-submodule（svn-externals）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-submodule（svn-externals）"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git submodule（svn:externals）")]),s._v(" "),a("h3",{attrs:{id:"子模块预热"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子模块预热"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 子模块预热")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("记录子模块更新地址的文件内容和配置内容如下\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/gitconfig.png",alt:"'.git/config文件'",title:".git/config文件"}})]),s._v(" "),a("center",[s._v(".git/config文件")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/submodule.png",alt:"'.submodule文件'",title:".submodule文件"}})]),s._v(" "),a("center",[s._v(".gitmodule文件")])],1)]),s._v(" "),a("li",[a("p",[s._v("所谓submodule是git主模块不记录子模块的diff而是记录子模块的git路径和commitid，因此每当修改时公共子模块时记得切换子模块的分离头commitid到一个分支，子push更新仓库，主push更新子commitid引用，否则别人更新你的push的子模块会报找不到混乱的commitid引用\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/submoduleerror.png",alt:"'子模块更新出错'",title:"子模块更新出错"}})]),s._v(" "),a("center",[s._v("子模块更新出错1unadevertised object（混乱的commitid对象）")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/submoduleerror2.png",alt:"'子模块更新出错'",title:"子模块更新出错"}})]),s._v(" "),a("center",[s._v("子模块更新出错2unadevertised object（混乱的commitid对象）")])],1)]),s._v(" "),a("li",[a("p",[s._v("区分下主/子的.git\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/mainmodule.git.png",alt:"'主模块git'",title:"主模块git"}})]),s._v(" "),a("center",[s._v("主模块git文件")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/submodule.git.png",alt:"'子模块git'",title:"子模块git"}})]),s._v(" "),a("center",[s._v("子模块git文件")])],1)]),s._v(" "),a("li",[a("p",[s._v("查看子模块状态含义（+/-）")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    +72c8915734db64573f91967555a6982b0a0516c7 lib1 (remotes/origin/HEAD)\n    -9cd4ad5f0c18c5a1b032355745dbb17e90f852a2 lib2 (heads/master)\n    -代表子模块未检出\n    +代表子模块有更新\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("git有了子模块操作变成了根据子模块数量次操作，例如push, pull, clone等要在子模块push后主模块push（这里还有更多细节，继续往下看）,记住看到有.gitmodules文件后git status看的状态没有反映子模块的，使用git submodule查看子模块状态")])]),s._v(" "),a("h3",{attrs:{id:"子模块操作全指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子模块操作全指南"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 子模块操作全指南")]),s._v(" "),a("ol",[a("li",[s._v("增加子模块：(只要子.git的裸仓库地址即可，远程子仓库添加操作一样)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git submodule add ../../resp/lib1.git libs/lib //增加子模块指定子模块存放位置\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("子模块追加路径错误问题处理:")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("子模块追加路径错误会出现错误.git，.git/config文件记录地址错误，git submodule update更新不到子模块\n通过更改主模块.git/config，删除子模块错误.git, 重新git submodule update更新子模块即可\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("克隆带有子模块的项目:(clone+update)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git clone 主模块后在git submodule init增加子模块跟踪git submodule update检出子模块即可\n或者git clone --recurse ../../resp/lib1.git 获取主模块递归获取所有子模块\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("修改子模块：(push两次)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("修改记得切换子模块分支(默认分离头)，然后子模块改完push主模块再push更新子模块commitId引用\n保证修改的子模块diff在分支上，这样别人pull下时才不会报找不到混乱的commitId\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("同个项目更新公共子模块更新：(pull+update)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git pull主模块后（更新子模块commitId引用），最好git submodule init（增加子模块跟踪）\ngit submodule update（以分离头更新子模块即可，此时的分离头commitId为最近push该项目那个人更新的引用）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"6"}},[a("li",[s._v("不同项目更新公共子模块的更新：(pull两次+push两次)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("主模块git pull（由于不同项目可能拿不到最新的子模块commitId引用，因此需要确定一个子模块更新的分支）\n切换对应子模块分支pull（记得切换对应的分支，该分支为约定好的修改子模块的diff分支，例如dev）\n子模块push，主模块push更新子模块commitID（同步该项目最新子模块commitId，之后他人pull下的才是最新子模块引用）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"7"}},[a("li",[s._v("一个项目更新了公共子模块，不同项目批量更新子模块，痛点是每个子模块都要到对应diff分支pull，可以使用"),a("code",[s._v("foreach")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git submodule foreach git pull\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示：shell编程总能给编码带来不一样的体验")]),s._v(" "),a("p",[s._v("或者使用如下脚本, 记得赋予执行权限如"),a("code",[s._v("chmod +x ./bin/update-submodules.sh")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/bin/bash\n# write\ngrep path .gitmodules | awk '{ print $3 }' > /tmp/study-git-submodule-dirs\n# read\nwhile read LINE\ndo\n    echo $LINE\n    (cd ./$LINE && git checkout master && git pull)\ndone < /tmp/study-git-submodule-dirs\n# grep读取.gitmodules带有关键\"path\"的每一行保存成一个文件，循环读取这个文件每一行存到变量LINE, 执行(cd ./$LINE && git checkout master && git pull)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ol",{attrs:{start:"8"}},[a("li",[s._v("移除Submodule，通过这里也可以理解git子模块的原理和管理模式")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' 1. 删除git cache和物理文件夹\n    git rm -r --cached libs/\n    rm -rf libs\n 2. 删除.gitmodules的内容（或者整个文件）\n    rm .gitmodules\n 3. 删除.git/config的submodule配置，移除诸如下面内容\n    [submodule "libs/lib1"]\n        url = /home/henryyan/submd/repos/lib1.git\n    [submodule "libs/lib2"]\n        url = /home/henryyan/submd/repos/lib2.git\n 4. 提交更改\n    git add .gitmodules\n    git commit -m "删除子模块lib1和lib2"\n    git push\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ol",{attrs:{start:"9"}},[a("li",[s._v("拉取所有子模块下的子模块，属于子模块嵌套的情况")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git submodule foreach git pull//pull下所有子模块,拿到子模块最新的下级子模块commitId应用\ngit submodule foreach --recursive git submodule init//所有子模块跟踪下级子模块\ngit submodule foreach --recursive git submodule update//所有子模块检出下级子模块\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"10"}},[a("li",[a("p",[s._v("其他批量操作，以此类推")]),s._v(" "),a("ul",[a("li",[s._v("stash所有submodules")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git submodule foreach 'git stash'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("所有submodules创建新分支")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git submodule foreach 'git checkout -b <branch_name>'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"git-subtree详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-subtree详解"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git subtree详解")]),s._v(" "),a("h3",{attrs:{id:"初步介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初步介绍"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 初步介绍")]),s._v(" "),a("hr"),s._v(" "),a("p",[a("code",[s._v("git subtree")]),s._v("可以实现一个仓库作为其他仓库的子仓库。subtree的核心思想与能做的就只有同步项目文件。")]),s._v(" "),a("ul",[a("li",[s._v("假如有P1 、P2两个项目，两个项目存在共用的代码，将共用的代码独立为新的git仓库——share项目。")]),s._v(" "),a("li",[s._v("当你对P1/P2项目操作git clone或者git pull的时候，你拉取到的是整个P1/P2项目，包括share在内，share对于父级的主项目来说相当于是个普通目录；")]),s._v(" "),a("li",[s._v("当你在P1/P2项目修改了share里的内容后执行git push，修改的share文件将像其他普通文件那样push到P1/P2项目上。")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("subtree本质就是把子项目目录作为一个普通的文件目录，对于父级的主项目来说是完全透明的，真的就是个普通目录，原来是怎么操作现在依旧是那么操作，就像操作主项目中其他文件一样的 add commit。")])]),s._v(" "),a("p",[s._v("使用git subtree 有以下几个原因：")]),s._v(" "),a("ul",[a("li",[s._v("旧版本的git也支持(最老版本可以到 v1.5.2).")]),s._v(" "),a("li",[s._v("git subtree与git submodule不同，它不增加任何像.gitmodule这样的新的元数据文件.")]),s._v(" "),a("li",[s._v("git subtree对于项目中的其他成员透明，意味着可以不知道git subtree的存在.")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("ol",[a("li",[s._v("Git Submodule：这是Git官方以前的推荐方案")]),s._v(" "),a("li",[s._v("Git Subtree：从 Git 1.5.2 开始，Git 新增并推荐使用这个功能来管理子项目")])])]),s._v(" "),a("blockquote",[a("p",[s._v("不同项目间双向同步公共代码方案")])]),s._v(" "),a("ul",[a("li",[s._v("npm：实际上不仅仅是 node 的包管理工具，虽然 npm、composer(php版npm/php版Maven)、maven 等更侧重于包的依赖管理，以上几个方案都是能够做到在不同项目中同步同一块代码的，但没法双向同步，更适用于子项目代码比较稳定的情形,这就是包有版本号的原因。")]),s._v(" "),a("li",[s._v("Git Submodule 和 Git Subtree 都是官方支持的功能，不具有依赖管理的功能，但能满足我们的要求。但是只用master分支，不管版本，有风险")]),s._v(" "),a("li",[s._v("综上各个项目共用一个库，而这个库正在快速迭代更新的过程中适合Subtree，按版本来更新代码适合npm")])]),s._v(" "),a("h3",{attrs:{id:"使用姿势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用姿势"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 使用姿势")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[s._v("git subtree的主要命令有：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git subtree add   --prefix=<prefix> <commit>\ngit subtree add   --prefix=<prefix> <repository> <ref>\ngit subtree pull  --prefix=<prefix> <repository> <ref>\ngit subtree push  --prefix=<prefix> <repository> <ref>\ngit subtree merge --prefix=<prefix> <commit>\ngit subtree split --prefix=<prefix> [OPTIONS] [<commit>]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("我们先准备一个仓库叫photoshop，一个仓库叫libpng，然后我们希望把libpng作为photoshop的子仓库。")]),s._v(" "),a("p",[s._v("photoshop的路径为https://github.com/test/photoshop.git，仓库里的文件有：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("photoshop\n    |\n    |-- photoshop.c\n    |-- photoshop.h\n    |-- main.c\n    \\-- README.md\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("libPNG的路径为https://github.com/test/libpng.git，仓库里的文件有：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("libpng\n    |\n    |-- libpng.c\n    |-- libpng.h\n    \\-- README.md\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("以下操作均位于父仓库的根目录中。")]),s._v(" "),a("blockquote",[a("p",[s._v("在父仓库中新增子仓库")])]),s._v(" "),a("ol",[a("li",[s._v("我们执行以下命令把libpng添加到photoshop中：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// git subtree add --prefix=<项目的相对路径> <项目远程库仓库地址 | 项目远程库别名> <项目分支>\ngit subtree add --prefix=sub/libpng https://github.com/test/libpng.git master --squash\n//--prefix之后的=等号也可以用空格,指定存放位置，简写-P\n//--squash参数表示不拉取历史信息，把subtree的改动合并成一次commit，这样就不用拉取子项目完整的历史记录。\n//如果不加 --squash 参数，主项目会合并子项目本身所有的 commit 历史记录，子项目的更新记录“污染”了主项目\n//加上 --squash 参数是把子项目的记录合成一次 commit 提交到主项目，这样主项目只是合并一次 commit 记录。\n//这样的命令，把libpng项目的代码下载到--prefix所指定的目录，并在photoshop项目里自动产生两个commit\n//就是把libpng目录的内容提交到photoshop项目里\n\ngit subtree add --prefix=components/zenjs zenjs master\ngit subtree push --prefix=components/zenjs zenjs hotfix/zenjs_xxxx\n//这会在远程的zenjs的仓库里生成一个叫 hotfix/zenjs_xxxx 的的分支，包含过去对components/zenjs的更改记录\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("每次push命令都会遍历全部的commit,当你的项目越来越大,commit的数上来的时候,等待时间就会很长。--rejoin 避免了遍历全部commit的问题.")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//git subtree split --rejoin --prefix=<项目的相对路径> --branch <临时branch>\ngit subtree split --rejoin --prefix=src/share --branch srcTemp\n//git push <项目远程库仓库地址 | 项目远程库别名> srcTemp:master\ngit push share srcTemp:master\n//原理为重新split出一个新起点（这样，每次提交subtree的时候就不会从头遍历一遍了）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("执行git status可以看到提示新增两条commit：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/3287022680-5a0a9edfaf6d9_articlex.png",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("git subtree后git status信息")])],1),s._v(" "),a("li",[s._v("git log查看详细修改:\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/1818720196-5a0a9edfbd94d_articlex.png",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("git subtree后git log信息")])],1),s._v(" "),a("li",[s._v("执行git push把修改推送到远端photoshop仓库，现在本地仓库与远端仓库的目录结构为：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("photoshop\n    |\n    |-- sub/\n    |   |\n    |   \\--libpng/\n    |       |\n    |       |-- libpng.c\n    |       |-- libpng.h\n    |       \\-- README.md\n    |\n    |-- photoshop.c\n    |-- photoshop.h\n    |-- main.c\n    \\-- README.md\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("这时当你git clone或者git pull的时候，你拉取到的是整个photoshop(包括libpng在内，libpng就相当于photoshop里的一个普通目录)；当你修改了libpng里的内容后执行git push，你将会把修改push到photoshop上。也就是说photoshop仓库下的libpng与其他文件无异")])]),s._v(" "),a("blockquote",[a("p",[s._v("拉取libpng更新")])]),s._v(" "),a("p",[s._v("如果源libpng仓库更新了，photoshop里的libpng如何拉取更新？使用"),a("code",[s._v("git subtree pull")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git subtree pull --prefix=sub/libpng https://github.com/test/libpng.git master --squash\ngit subtree pull --prefix=<项目的相对路径> <项目远程库仓库地址 | 项目远程库别名> <分支> --squash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("推送修改到libpng")])]),s._v(" "),a("p",[s._v("如果在photoshop仓库里修改了libpng，然后想把这个修改推送到源libpng仓库呢？使用"),a("code",[s._v("git subtree push")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git subtree push --prefix=sub/libpng https://github.com/test/libpng.git master\ngit subtree push --prefix=<项目的相对路径> <项目远程库仓库地址 | 项目远程库别名> <项目分支>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("把子仓库的地址作为一个remote别名")])]),s._v(" "),a("p",[s._v("执行"),a("code",[s._v("git remote add -f libpng https://github.com/test/libpng.git")]),s._v(",然后可以这样来使用git subtree命令:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git subtree add --prefix=sub/libpng libpng master --squash\ngit subtree pull --prefix=sub/libpng libpng master --squash\ngit subtree push --prefix=sub/libpng libpng master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"git-subtree要不要使用-squash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-subtree要不要使用-squash"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git subtree要不要使用–squash")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温新提示")]),s._v(" "),a("p",[s._v("是否使用 squash 都是可以的， 但需要在开始阶段作出选择，并 一直坚持下去 。 如果一会儿用一会儿不用，得到的不是两者的优点，而是两者的缺点之和。")])]),s._v(" "),a("blockquote",[a("p",[s._v("使用 --squash 参数")])]),s._v(" "),a("p",[s._v("就是把 subtree 子项目的更新记录进行合并，再合并到主项目中：subtree add 或者 pull 操作的结果对应两个 commit， 一个是 squash 了子项目的历史记录， 一个是 Merge 到主项目中。")]),s._v(" "),a("ul",[a("li",[s._v("优点：主项目的历史记录看起来还是比较整齐的。")]),s._v(" "),a("li",[s._v("缺点：在子项目需要 subtree pull 的时候，经常需要处理冲突，甚至每次 subtree pull 的时候都需要重复处理同样的冲突。")]),s._v(" "),a("li",[s._v("原因：subtree add/pull 操作中，需要用到 merge，而 merge 顺利进行的前提， 是要有相同的 parent commit。原子项目历史记录被合并后就消失了，相当于一个“新”的提交。 下次再进行 add/pull 时，新添加的内容找不到“上一次的修改”， 于是在更新 subtree 内文件的时候，就会提示冲突，需要手工解决。")])]),s._v(" "),a("blockquote",[a("p",[s._v("不使用 --squash 参数")])]),s._v(" "),a("ul",[a("li",[s._v("优点：子项目更新的时候，subtree pull 很顺利， 能够自动处理已解决过的冲突。")]),s._v(" "),a("li",[s._v("原因： 原子项目的历史复制到了父项目中， 下次再进行 add/pull 时，新增的 commit 能够找到“上一次的修改”， 那么他会像在子项目中逐个 am patch 那样更新 subtree 下的内容， 不会提示冲突。")]),s._v(" "),a("li",[s._v("缺点：子项目的更新记录“污染”了主项目的。")])]),s._v(" "),a("blockquote",[a("p",[s._v("希望能够比较顺利的更新子项目， 又不希望子项目的历史记录")])]),s._v(" "),a("p",[s._v("另外建立一个分支进行 –no-squash 的 subtree 更新， 这样就保留了子项目的历史记录，没有烦人的反复冲突问题\n然后在合并到主分支（比如 master）时合并提交（ git merge --squash ）， 这样主项目的主分支上只会体现一个 commit， 比直接 git subtree add/pull --squash 还要简洁。")]),s._v(" "),a("h3",{attrs:{id:"sunmodule对比subtree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sunmodule对比subtree"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" sunmodule对比subtree")]),s._v(" "),a("hr"),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("/")]),s._v(" "),a("th",[s._v("submodule")]),s._v(" "),a("th",[s._v("subtree")]),s._v(" "),a("th",[s._v("结果")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("远程仓库空间占用")]),s._v(" "),a("td",[s._v("submodule只是引用，基本不占用额外空间")]),s._v(" "),a("td",[s._v("子模块copy，会占用较大的额外空间")]),s._v(" "),a("td",[s._v("submodule占用空间较小，略优")])]),s._v(" "),a("tr",[a("td",[s._v("本地空间占用")]),s._v(" "),a("td",[s._v("可根据需要下载")]),s._v(" "),a("td",[s._v("会下载整个项目")]),s._v(" "),a("td",[s._v("所有模块基本都要下载，二者差异不大")])]),s._v(" "),a("tr",[a("td",[s._v("仓库克隆")]),s._v(" "),a("td",[s._v("克降后所有子模块为空，需要注册及更新，同时更新后还需切换分支")]),s._v(" "),a("td",[s._v("克隆之后即可使用")]),s._v(" "),a("td",[s._v("submodule步骤略多，subtree占优")])]),s._v(" "),a("tr",[a("td",[s._v("更新本地仓库")]),s._v(" "),a("td",[s._v("更新后所有子模块后指向最后一次提交，更新后需要重新切回分支，所有子模块只需一条更新语句即可")]),s._v(" "),a("td",[s._v("所有子模块需要单独更新")]),s._v(" "),a("td",[s._v("各有优劣，相对subtree更好用一些")])]),s._v(" "),a("tr",[a("td",[s._v("提交本地修改")]),s._v(" "),a("td",[s._v("只需关心子模块即可，子模块的所有操作与普通git项目相同")]),s._v(" "),a("td",[s._v("提交执行命令相对复杂一些")]),s._v(" "),a("td",[s._v("submodule操作更简单，submodule占优")])])])]),s._v(" "),a("h2",{attrs:{id:"git-merge全解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge全解析"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git merge全解析")]),s._v(" "),a("p",[s._v("git-merge命令是用于将两个或两个以上的开发历史合并在一起的操作，通常也可写作：git merge。")]),s._v(" "),a("p",[s._v("在git-merge命令中，有以下两种使用方式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git merge  [--[no-]commit] [--[no-]squash] [--[no-]ff ] [--[no-]edit] [-m <msg>]\n[-s <strategy>] [-X <strategy-option>] [–[no-]allow-unrelated-histories]\n\ngit merge (–continue | –abort | –quit)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"git-merge-abort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-abort"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" "),a("code",[s._v("git merge --abort")])]),s._v(" "),a("p",[a("code",[s._v("git merge --abort")]),s._v("将会抛弃合并过程并且尝试重建合并前的状态。但是，当合并开始时如果存在未commit的文件，"),a("code",[s._v("git merge --abort")]),s._v("在某些情况下将无法重现合并前的状态。（特别是这些未commit的文件在合并的过程中将会被修改时），当你搞不定了，就使用"),a("code",[s._v("git merge --abort")]),s._v("回滚。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("运行git-merge时含有大量的未commit文件很容易让你陷入困境，这将使你在冲突中难以回退。因此非常不鼓励在使用git-merge时存在未commit的文件，建议使用git-stash命令将这些未commit文件暂存起来，并在解决冲突以后使用git stash pop把这些未commit文件还原出来。")])]),s._v(" "),a("h3",{attrs:{id:"commit和-no-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit和-no-commit"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" --commit和--no-commit")]),s._v(" "),a("hr"),s._v(" "),a("p",[a("code",[s._v("--commit")]),s._v("参数使得合并后产生一个合并结果的commit节点。该参数可以覆盖--no-commit。")]),s._v(" "),a("p",[a("code",[s._v("--no-commit")]),s._v("参数使得合并后，为了防止合并失败并不自动提交，能够给使用者一个机会在提交前审视和修改合并结果。")]),s._v(" "),a("h3",{attrs:{id:"ff-no-ff-ff-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ff-no-ff-ff-only"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" "),a("code",[s._v("--ff/--no-ff/--ff-only")])]),s._v(" "),a("hr"),s._v(" "),a("p",[a("code",[s._v("--ff")]),s._v(",是指fast-forward命令。当使用fast-forward模式进行合并时，将不会创造一个新的commit节点。默认情况下，git-merge采用fast-forward模式。")]),s._v(" "),a("p",[a("code",[s._v("--no-ff")]),s._v(",即使可以使用fast-forward模式，也要创建一个新的合并节点。这是当git merge在合并一个tag时的默认行为。")]),s._v(" "),a("p",[a("code",[s._v("--ff-only")]),s._v(",只有能快速合并的情况才合并。如果合并过程出现冲突，Git会自动abort此次merge")]),s._v(" "),a("h3",{attrs:{id:"squash-no-squash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#squash-no-squash"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" "),a("code",[s._v("-squash/--no-squash")])]),s._v(" "),a("hr"),s._v(" "),a("p",[a("code",[s._v("--squash")]),s._v(" 从当前分支和合并分支的共同祖先节点之后的合并分支节点，一直到合并分支顶部节点压缩成一个diff应用当前分支，使用者可以经过审视后进行提交，产生一个新的节点。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//例如压缩featureB分支的所有提交\n$ git checkout -b featureBv2 origin/master\n$ git merge --squash featureB\n  ... change implementation ...\n$ git commit\n$ git push myfork featureBv2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("该参数和"),a("code",[s._v("--no-ff")]),s._v("冲突,如果功能分支的多次提交都是有意义的，使用--no-ff命令更为合适。")])]),s._v(" "),a("p",[a("code",[s._v("--no-squash")]),s._v("合并不压缩提交节点")]),s._v(" "),a("h3",{attrs:{id:"s-strategy-x-strategy-option"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#s-strategy-x-strategy-option"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" "),a("code",[s._v("-s/--strategy/-X/--strategy-option")])]),s._v(" "),a("hr"),s._v(" "),a("p",[a("code",[s._v("-s/--strategy")]),s._v("用于指定合并的策略,默认情况如果没有指定该参数，git将按照下列情况采用默认的合并策略")]),s._v(" "),a("ul",[a("li",[s._v("合并节点只含有单个父节点时（如采用fast-forward模式时），采用recursive策略。")]),s._v(" "),a("li",[s._v("合并节点含有多个父节点时(如采用no-fast-forward模式时)，采用octopus策略。")])]),s._v(" "),a("p",[a("code",[s._v("-X/--strategy-option")]),s._v("在"),a("code",[s._v("-s/--strategy")]),s._v("时指定该策略的具体参数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// git pull\ngit pull origin cygwin//使用recursive策略合并\ngit pull -s origin cygwin//使用recursive策略合并\n// -s 默认就是 recursive，所以省略了。\ngit pull -X theirs origin cygwin//使用theirs策略合并\n// -X 指定用别人的覆盖自己的。\n\n// git merge使用\n# keep remote files\ngit merge --strategy-option theirs\n# keep local files\ngit merge --strategy-option ours\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"merge策略参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge策略参数"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" merge策略参数")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("diff-algorithm=[patience|minimal|histogram|myers]")])])]),s._v(" "),a("p",[s._v("告知git merge-recursive使用不同的比较算法。")]),s._v(" "),a("p",[s._v("比如"),a("code",[s._v("patience")]),s._v("花费一些额外的时间来避免错过合并一些不重要的行（如函数的括号）。如果当前分支和对方分支的版本分支分离非常大时，建议采用这种合并方式。")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("gnore-space-change")]),s._v(", "),a("code",[s._v("ignore-all-space")]),s._v(", "),a("code",[s._v("ignore-space-at-eol")]),s._v("策略参数")])]),s._v(" "),a("p",[s._v("根据指定的参数来对待空格冲突。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("gnore-space-change")]),s._v("如果对方的版本仅仅添加了空格的变化，那么冲突合并时采用我们自己的版本")]),s._v(" "),a("li",[a("code",[s._v("ignore-all-space")]),s._v("如果我们的版本含有空格，但是对方的版本包含大量的变化，那么冲突合并时采用对方的版本")]),s._v(" "),a("li",[a("code",[s._v("ignore-space-at-eol")]),s._v("采用正常的处理过程")])]),s._v(" "),a("h3",{attrs:{id:"edit、-e-no-edit-m-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#edit、-e-no-edit-m-msg"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" --edit、-e/--no-edit/"),a("code",[s._v("-m <msg>")])]),s._v(" "),a("hr"),s._v(" "),a("p",[a("code",[s._v("--edit")]),s._v("和"),a("code",[s._v("-e")]),s._v("用于在成功合并、提交前调用编辑器来进一步编辑自动生成的合并信息。因此使用者能够进一步解释和判断合并的结果。")]),s._v(" "),a("p",[a("code",[s._v("--no-edit")]),s._v("参数能够用于接受自动合并的信息")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("如果你在合并时已经给定了-m参数，使用 --edit（或-e）依然是有用的，这将在编辑器中进一步编辑-m所含的内容")])]),s._v(" "),a("p",[a("code",[s._v("-m <msg>")]),s._v("设置用于创建合并节点时的提交信息。")]),s._v(" "),a("h3",{attrs:{id:"merge日志参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge日志参数"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" merge日志参数")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("--log[=<n>]")]),s._v("和 "),a("code",[s._v("--no-log")])])]),s._v(" "),a("p",[a("code",[s._v("--log[=<n>]")]),s._v("将在合并提交时，除了含有分支名以外，还将含有最多n个被合并commit节点的日志信息。")]),s._v(" "),a("p",[a("code",[s._v("--no-log")]),s._v("并不会列出该信息")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("-stat")]),s._v(", "),a("code",[s._v("-n")]),s._v("、"),a("code",[s._v("--no-stat")]),s._v("命令")])]),s._v(" "),a("p",[a("code",[s._v("--stat")]),s._v("参数将会在合并结果的末端显示文件差异的状态。文件差异的状态也可以在git配置文件中的merge.stat配置。")]),s._v(" "),a("p",[s._v("相反，"),a("code",[s._v("-n")]),s._v(", "),a("code",[s._v("--no-stat")]),s._v("参数将不会显示该信息")]),s._v(" "),a("h3",{attrs:{id:"gpg签名验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gpg签名验证"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" GPG签名验证")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("GPG是加密软件，可以使用GPG生成的公钥在网上安全的传播你的文件、代码。为什么说安全的？")]),s._v(" "),a("p",[s._v("以Google所开发的repo为例，repo即采用GPG验证的方式，每个里程碑tag都带有GPG加密验证，假如在里程碑v1.12.3处你想要做修改，修改完后将这个tag删除，然后又创建同名tag指向你的修改点，这必然是可以的。")]),s._v(" "),a("p",[s._v("但是，在你再次clone你修改后的项目时，你会发现，你对此里程碑tag的改变不被认可，验证失败，导致你的修改在这里无法正常实现。这就是GPG验证的作用，这样就能够保证项目作者（私钥持有者）所制定的里程碑别人将无法修改。那么，就可以说，作者的代码是安全传播的。")]),s._v(" "),a("p",[s._v("为什么会有这种需求？一个项目从开发到发布，再到后期的更新迭代，一定会存在若干的稳定版本与开发版本（存在不稳定因素）。作为项目发起者、持有者，有权定义他（们）所认可的稳定版本，这个稳定版本，将不允许其他开发者进行改动。")]),s._v(" "),a("p",[s._v("还以Google的repo项目为例，项目所有者定义项目开发过程中的点A为稳定版v1.12.3，那么用户在下载v1.12.3版本后，使用的肯定是A点所生成的项目、产品，就算其他开发者能够在本地对v1.12.3进行重新指定，指定到他们修改后的B点，但是最终修改后的版本给用户用的时候，会出现GPG签名验证不通过的问题，也就是说这样的修改是不生效的")]),s._v(" "),a("h3",{attrs:{id:"三路合并算法-three-way-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三路合并算法-three-way-merge"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 三路合并算法(three-way merge)")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("三路合并算法是用于解决冲突的一种方式，当产生冲突时，三路合并算法会获取三个节点：本地冲突的B节点，对方分支的C节点，B，C节点的共同最近祖先节点A。三路合并算法会根据这三个节点进行合并。")]),s._v(" "),a("p",[s._v("具体过程是，B，C节点和A节点进行比较，如果B，C节点的某个文件和A节点中的相同，那么不产生冲突；如果B或C只有一个和A节点相比发生变化，那么该文件将会采用该变化了的版本；如果B和C和A相比都发生了变化，且变化不相同，那么则需要手动去合并;如果B，C都发生了变化，且变化相同，那么并不产生冲突，会自动采用该变化的版本。最终合并后会产生D节点，D节点有两个父节点，分别为B和C。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("祖先（base）")]),s._v(" "),a("th",[s._v("HEAD（ours）")]),s._v(" "),a("th",[s._v("分支（theirs）")]),s._v(" "),a("th",[s._v("结果")]),s._v(" "),a("th",[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("A")]),s._v(" "),a("td",[s._v("A")]),s._v(" "),a("td",[s._v("A")]),s._v(" "),a("td",[s._v("A")]),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("A")]),s._v(" "),a("td",[s._v("A")]),s._v(" "),a("td",[s._v("B")]),s._v(" "),a("td",[s._v("B")]),s._v(" "),a("td",[s._v("如果一方修改了某个文件，选择修改版的文件")])]),s._v(" "),a("tr",[a("td",[s._v("A")]),s._v(" "),a("td",[s._v("B")]),s._v(" "),a("td",[s._v("A")]),s._v(" "),a("td",[s._v("B")]),s._v(" "),a("td",[s._v("如果一方修改了某个文件，选择修改版的文件")])]),s._v(" "),a("tr",[a("td",[s._v("A")]),s._v(" "),a("td",[s._v("B")]),s._v(" "),a("td",[s._v("B")]),s._v(" "),a("td",[s._v("B")]),s._v(" "),a("td",[s._v("如果双方拥有相同的变更，选择修改过的版本")])]),s._v(" "),a("tr",[a("td",[s._v("A")]),s._v(" "),a("td",[s._v("B")]),s._v(" "),a("td",[s._v("C")]),s._v(" "),a("td",[s._v("merge")]),s._v(" "),a("td",[s._v("如果一方包含与另一方不一样的变更，那么在内容层面存在合并冲突")])])])]),s._v(" "),a("h3",{attrs:{id:"交叉合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交叉合并"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 交叉合并")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("递归三路合并/交叉合并(Recursive three-way merge)")])]),s._v(" "),a("p",[s._v("三路合并算法的基础是找到被合并的共同祖先。在遇到十字交叉合并（criss-cross merge）时，不存在独一无二的最小共同祖先，如下图所示，merge D和F时，发现C和E都是它们的公共祖先，这可怎么办，C和E哪一个作为共同祖先呢？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("B--C--D  master\n \\  \\/\n  \\ /\\\n   E--F  dev\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这种情况经常发生在迭代一段时间的项目，假设master基于c节点迭代和dev基于e节点迭代，master因为业务需要合并了e节点（或以前）的diff，dev合并了c节点（或以前）的diff，这时要合并master和dev就形成了两个公共祖先。")]),s._v(" "),a("p",[s._v("这种情况Git的策略是：先合并 C 和 E 得到一个虚拟的公共祖先 G，把这个 G 作为 Base. 那如果合并 C 和 E 的时候发现他们的公共祖先也不止一个怎么办？所以就要递归进行了。")]),s._v(" "),a("p",[s._v("如下图：合并 M 和 N，发现他们的共同祖先有2个——L 和 K，于是合并 L 和 K，又发现他们的祖先不止一个——I 和 J，于是合并 I 和 J，就这样递归下去。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("B--C---D--I--L--M     master\n \\         \\/ \\/\n  \\        /\\ /\\\n   E---F--J--K--N     dev\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"resolve策略解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolve策略解释"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" resolve策略解释")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("当出现交叉合并时（共同祖先节点有多个），这时候无法按照三路合并算法进行合并，resolve策略选择其中一个可能的合并基准点并期望这是合并最好的结果而不是采用递归三路合并（recursive策略）")]),s._v(" "),a("p",[s._v("官方说实际上这并没有听起来的那么糟糕。通常情况下用户修改不同部分的代码，在这种情况下，很多的合并冲突其实是多余和重复的。而使用resolve进行合并时，产生的冲突也较易于处理，真正会遗失代码的情况很少。")]),s._v(" "),a("h3",{attrs:{id:"关于合并策略-strategy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于合并策略-strategy"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 关于合并策略(strategy)")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[s._v("默认的两分支合并策略是recursive策略(会产生一些少量的冲突，而不会进行错误的合并)，多分支是octopus策略")]),s._v(" "),a("li",[s._v("theirs策略,只选择别人的/ours策略,只选择本地的,theirs和ours参数都适用于合并二进制文件冲突的情况。")]),s._v(" "),a("li",[s._v("resolve策略(merge性能优化策略)")])]),s._v(" "),a("h3",{attrs:{id:"真实vs快进merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#真实vs快进merge"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 真实vs快进merge")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[s._v("git文档的3-way merge，公共祖先、HEAD（本地仓库的版本）、MERGE_HEAD（另外一个分支想要merge过来的版本），称为真实merge")])]),s._v(" "),a("p",[s._v("如下进行git merge 肯定会产生一个新的提交\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20190102153127851.png",alt:"'git stash'",title:"git merge"}})]),s._v("\nmerge后的结果为:\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20190102161021866.png",alt:"'git stash'",title:"git merge"}})])],1),s._v(" "),a("ul",[a("li",[s._v("除去真实 merge，肯定还有不真实的 merge，就是那种 FF （FAST-FORWARD MERGE）的 merge，这个 FF，曾经出现在在收音机上，出现在录像机上，出现在视频播放器上，就是快进的意思。")])]),s._v(" "),a("p",[s._v("如下进行git merge,不会产生新的提交\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2019010214535112.png",alt:"'git stash'",title:"git merge"}})]),s._v("\nmerge后的结果为:\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20190102160919382.png",alt:"'git stash'",title:"git merge"}})])],1),s._v(" "),a("h3",{attrs:{id:"关于unrelated-history"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于unrelated-history"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 关于unrelated history")]),s._v(" "),a("hr"),s._v(" "),a("ol",[a("li",[a("p",[s._v("本地merge时遇到"),a("code",[s._v("refusing to merge unrelated histories")]),s._v("的错误")]),s._v(" "),a("p",[s._v("原因是两个仓库不同而导致的，需要在后面加上"),a("code",[s._v("--allow-unrelated-histories")]),s._v("进行允许合并,如果还不能解决问题，把本地的remote删除，重新git remote add添加远程仓库，再按上面的方法来")])]),s._v(" "),a("li",[a("p",[s._v("远程push的时候出现"),a("code",[s._v("refusing to merge unrelated histories")])]),s._v(" "),a("p",[s._v("本地仓库为了同步远程仓库地址到本地直接推送远程仓库报错"),a("code",[s._v("fatal: refusing to merge unrelated histories")]),s._v(",出现这个问题的主要原因是本地仓库和远程仓库实际上是独立的两个仓库，分支没有共同祖先。")]),s._v(" "),a("p",[s._v("假如我之前是直接clone的方式在本地建立起远程github仓库的克隆本地仓库就不会有这问题。")]),s._v(" "),a("p",[s._v("可以在pull命令后紧接着使用--allow-unrelated-history选项来解决问题（该选项可以合并两个独立启动仓库的历史），如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git pull origin master –allow-unrelated-histories\n//以上是将远程仓库的文件拉取到本地仓库了。\n//紧接着将本地仓库的提交推送到远程github仓库上，使用的命令是：\n$ git push <远程主机名> <本地分支名>:<远程分支名>\n//也就是`git push origin master:master`。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"git-merge-no-ff与-squash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-no-ff与-squash"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git merge --no-ff与--squash")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("git merge --no-ff")])]),s._v(" "),a("p",[a("code",[s._v("--no-ff")]),s._v("指的是强行关闭"),a("code",[s._v("fast-forward")]),s._v("方式,"),a("code",[s._v("fast-forward")]),s._v("方式就是当条件允许的时候，git直接把HEAD指针指向合并分支的头，完成合并。属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建commit")]),s._v(" "),a("blockquote",[a("p",[s._v("git merge --squash/--no-square")])]),s._v(" "),a("p",[a("code",[s._v("git merge --squash")]),s._v(" 是用来把一些不必要commit进行压缩，比如说，你的feature在开发的时候写的commit很乱，那么我们合并的时候不希望把这些历史commit带过来，于是使用--squash进行合并，此时文件已经同合并后一样了，但不移动HEAD，不提交。需要进行一次额外的commit来“总结”一下，然后完成最终的合并。")]),s._v(" "),a("h2",{attrs:{id:"git补丁操作相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git补丁操作相关"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git补丁操作相关")]),s._v(" "),a("h3",{attrs:{id:"git-cherry-pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git cherry-pick")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("git cherry-pick [commit]")])])]),s._v(" "),a("p",[s._v("选择一个commit，合并进当前分支,如果连续历史相当于merge,"),a("code",[s._v("cherry-pick")]),s._v("可以只应用某个commit的diff")]),s._v(" "),a("p",[s._v("常用切换错了分支提交了代码，把那次提交的diff应用回正确的分支")]),s._v(" "),a("p",[s._v("不连续的历史git可能会提示冲突，cherry-pick会中断，解决冲突后，使"),a("code",[s._v("用git add")]),s._v("添加冲突文件，再使用"),a("code",[s._v("git cherry-pick --continue")]),s._v("完成cherry-pick操作，或者使用"),a("code",[s._v("git cherry-pick --abort")]),s._v("中断操作")]),s._v(" "),a("p",[s._v("如果你cherry-pick的是别人分支的commit，可能会遇到错误"),a("code",[s._v("fatal: bad object ...")]),s._v(",那是因为git cherry-pick是本地特性，本地要有这个commit才可以被"),a("code",[s._v("git cherry-pick")]),s._v("。如果没有这个commit id，就会出现这个错误。")]),s._v(" "),a("h3",{attrs:{id:"git-cherry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git cherry")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("git cherry [-v] [<upstream> [<head> [<limit>]]]")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("-v ： 追朔，显示 SHA1 旁边的提交信息\n<upstream>上游分支来搜索等效提交。默认为 HEAD 的上游分支。\n<head>对比当前的commit,默认为 HEAD\n<limit> 指定不显示某个分支差异提交的上游应用情况\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("git cherry")]),s._v("用来查找尚未应用于上游的提交，经常用于基于补丁的工作流程中，您可以创建并发送如下主题分支")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git checkout -b topic origin/master\n# work and create some commits\n$ git format-patch origin/master\n$ git send-email ... 00*\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("稍后，您可以通过（仍在topic）来查看您的更改是否被上游已应用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git fetch  # update your notion of origin/master\n$ git cherry -v\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("例如：在topic由三个commit组成的情况下，上游维护者应用其中两个提交时，情况可能如下所示：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git log --graph --oneline --decorate --boundary origin/master...topic\n* 7654321 (origin/master) upstream tip commit\n[... snip some other commits ...]\n* cccc111 cherry-pick of C\n* aaaa111 cherry-pick of A\n[... snip a lot more that has happened ...]\n| * cccc000 (topic) commit C\n| * bbbb000 commit B\n| * aaaa000 commit A\n|/\no 1234567 branch point\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("在这种情况下，git-cherry 会显示一个尚未应用的简要摘要：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git cherry origin/master topic\n- cccc000... commit C\n+ bbbb000... commit B\n- aaaa000... commit A\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("我们看到提交A和C（标记为-）已被应用，提交B（标记为+）未被应用，如果想应用提交B重新生成补丁发送以应用到origin/master。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("关于limit")]),s._v(" "),a("p",[s._v("如果topic分支基于其他分支不是直接基于比较的上游分支切出，例如基于比较的上游分支base切出\n这时候可以去除base分支差异提交的上游应用情况显示，如下所示：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git log --graph --oneline --decorate --boundary origin/master...topic\n* 7654321 (origin/master) upstream tip commit\n[... snip some other commits ...]\n* cccc111 cherry-pick of C\n* aaaa111 cherry-pick of A\n[... snip a lot more that has happened ...]\n| * cccc000 (topic) commit C\n| * bbbb000 commit B\n| * aaaa000 commit A\n| * 0000fff (base) unpublished stuff F\n[... snip ...]\n| * 0000aaa unpublished stuff A\n|/\no 1234567 merge-base between upstream and topic\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("通过指定base限制，您可以避免列出base和topic之间的提交：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git cherry origin/master topic base\n- cccc000... commit C\n+ bbbb000... commit B\n- aaaa000... commit A\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"format-patch-diff-am-apply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format-patch-diff-am-apply"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" format-patch/diff/am/apply")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("git format-patch/diff/am/apply/merge/rebase")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git format-patch HEAD^          //最近一次提交节点的patch\ngit format-patch HEAD^^　　     //生成最近的2次commit的patch\ngit format-patch HEAD^^^        //生成最近的3次commit的patch\ngit format-patch HEAD^^^^       //生成最近的4次commit的patch\ngit format-patch <r1>..<r2>     //生成两个commit间的修改的patch（包含两个commit. <r1>和<r2>\ngit format-patch -1 <r1>        //生成单个commit的patch\ngit format-patch –n 07fe --n指patch数，07fe对应提交的名称\n故，单次提交即为：\ngit format-patch -1 07fe\ngit format-patch <r1>           //生成某commit以来的修改patch（不包含该commit）\ngit format-patch --root <r1>　  //生成从根到r1提交的所有patch\n\ngit format-patch生成的补丁文件默认从1开始顺序编号，并使用对应提交信息中的第一行作为文件名\n如果使用了`-- numbered-files`选项，则文件名只有编号，不包含提交信息\n如果指定了`--stdout`选项，可指定输出位置把所有patch输出到一个文件\n可指定`-o <dir>`指定patch的存放目录\n\ngit diff > tmp 生成diff\ngit diff --full-index 5f1d0ba b930d23 > ~/git/add3testcasesForChangeNotify.diff//生成二进制文件\ngit diff > file.patch//生成patch\npatch -p1 < file.patch//打patch（linux用法）\ngit apply file.patch//打patch\n\n\n\n\n//diff/patch都属于补丁,apply/am都可以应用\n//git apply是另外一种打patch的命令，其与git am的区别是\n//git apply并不会将commit message等打上去，打完patch后需要重新git add和git commit，\n//而git am会直接将patch的所有信息打上去，而且不用重新git add和git commit,author也是patch的author而不是打patch的人\ngit apply //应用补丁不自动生成提交\ngit apply --check 0001-function.patch   //检查patch是否能够打上，若没有任何输出说明无冲突可以打上\ngit apply --stat 0001-function.patch    //查看patch的情况\ngit am //批量应用补丁自动生成提交\ngit am --signoff 0001-function.patch    //添加-s或者--signoff，还可以把自己的名字添加为signed off by信息，作用是注明打patch的人是谁，因为有时打patch的人并不是patch的作者\ngit am ~/patch-set/*.patch              //将路径~/patch-set/*.patch 按照先后顺序打上\ngit am --abort                          //当git am失败时，用以将已经在am过程中打上的patch废弃掉\n                                        //比如有三个patch，打到第三个patch时有冲突，那么这条命令会把打上的前两个patch丢弃掉，返回没有打patch的状态\ngit am --resolved                       //当git am失败，解决完冲突后，这条命令会接着打patch\n\n\n//只要有commitid以下就可以使用\ngit merge //应用多个补丁\ngit rebase //应用多个补丁，并且本地变基\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br")])]),a("blockquote",[a("p",[s._v("如果打Patch的过程中发生了冲突（conflicts），怎么办？")])]),s._v(" "),a("p",[s._v("在git使用当中，会有很多时候别人（供应商或者其他的开发人员）发过来一系列的patch，这些patch通常的是类似这样的名字：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" 0001--JFFS2-community-fix-with-not-use-OOB.patch\n 0002--Community-patch-for-Fix-mount-error-in.patch\n 0003--partial-low-interrupt-latency-mode-for-ARM113.patch\n 0004--for-the-global-I-cache-invalidation-ARM11.patch\n 0005--1-arm-Add-more-cache-memory-types-macr.patch\n 0006--2-Port-imx-3.3.0-release-to-2.6.28.patch\n 0007--3-Add-MX25-support.patch\n 0008--Move-asm-arch-headers-to-linux-inc-dir.patch\n 0009--1-regulator-allow-search-by-regulator.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("里面包含了提交的日志，作者，日期等信息。你想做的是把这些patch引入到你的代码库中，最好是也可以把日志也引入进来， 方便以后维护用。传统的打patch方式是")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" patch -p1 < 0001--JFFS2-community-fix-with-not-use-OOB.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这样来打patch，但是这样会把这些有用的信息丢失。由于这些patch显然是用"),a("code",[s._v("git format-patch")]),s._v("来生成的，所以应该采用git am/apply。")]),s._v(" "),a("p",[s._v("使用git-am之前， 首先git am –abort 一次放弃掉以前的am信息进行一次全新的am避免遇到错误"),a("code",[s._v(".git/rebase-apply still exists but mbox given")]),s._v(",git-am 可以一次合并一个文件，或者一个目录下所有的patch，或者你的邮箱目录下的patch。git就会按照文件名的顺序一次am这些patch。如果git am中间遇到了patch冲突,am就会停到打这个patch的地方， 告诉你是哪个patch打不上去。")]),s._v(" "),a("p",[s._v("比如，一个典型的git am失败，可能是这样的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('$ git am PATCH\nApplying: PACTH DESCRIPTION\nerror: patch failed: file.c:137\nerror: file.c: patch does not apply\nerror: patch failed: Makefile:24\nerror: libavfilter/Makefile: patch does not apply\nPatch failed at 0001 PATCH DESCRIPTION\nWhen you have resolved this problem run "git am --resolved".\nIf you would prefer to skip this patch, instead run "git am --skip".\nTo restore the original branch and stop patching run "git am --abort".\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ol",[a("li",[s._v("如果不想打这一系列patch了，直接："),a("code",[s._v("git am --abort")])]),s._v(" "),a("li",[s._v("如果你想只是忽略这一个patch，可以运行"),a("code",[s._v("git am –skip")]),s._v("来跳过这个patch")]),s._v(" "),a("li",[s._v("如果还想打, 有两种解决方案")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("方案一：")]),s._v(" "),a("ul",[a("li",[s._v("根据"),a("code",[s._v("git am")]),s._v("失败的信息，找到发生冲突的具体patch文件，然后用命令"),a("code",[s._v("git apply --reject <patch_name>")]),s._v("，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch")]),s._v(" "),a("li",[s._v("根据.rej文件，通过编辑该patch文件的方式（或者要应用patch文件）解决冲突(这个patch文件是git在linux指令diff合并格式的变体)。")]),s._v(" "),a("li",[s._v("废弃上一条am命令已经打了的patch："),a("code",[s._v("git am --abort")])]),s._v(" "),a("li",[s._v("重新打patch："),a("code",[s._v("git am ~/patch-set/*.patchpatch")])])])]),s._v(" "),a("li",[a("p",[s._v("方案二：")]),s._v(" "),a("ul",[a("li",[s._v("根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令"),a("code",[s._v("git apply --reject <patch_name>")]),s._v("，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch")]),s._v(" "),a("li",[s._v("根据.rej文件，通过编辑发生冲突的code文件的方式解决冲突。")]),s._v(" "),a("li",[s._v("将该patch涉及到的所有文件（不仅仅是发生冲突的文件）通过命令"),a("code",[s._v("git add <file_name>")]),s._v("添加到工作区中")]),s._v(" "),a("li",[s._v("告诉git冲突已经解决，继续打patch: "),a("code",[s._v("git am --resolved")]),s._v(" ("),a("code",[s._v("git am --resolved")]),s._v(" 和 "),a("code",[s._v("git am --continue")]),s._v("是一样的)")])])]),s._v(" "),a("li",[a("p",[s._v("分析：")]),s._v(" "),a("p",[s._v("方案一和方案二主要区别是解决冲突的方法不一样。方案一是通过编辑patch文件的方式解决冲突，方案二是通过编辑冲突code文件的方式解决冲突。这两种方案区别比较大：经过实验，核心区别在于，方案二无法验证冲突有没有切实的解决。即使你在方案二的第二步乱改一通，也能“打完”发生冲突的patch（并没有检测修改后的code文件跟patch期望的是否相同）。因此，如果采用方案二，那么再解决code文件冲突后，需要人工去确认修改的正确性。")])])]),s._v(" "),a("h3",{attrs:{id:"演示打补丁过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#演示打补丁过程"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 演示打补丁过程")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("先通过git log 查看有哪一些commit\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20170113171327554.jpg",alt:"'git format-patch'",title:"git format-patch"}})])],1),s._v(" "),a("p",[s._v("把第一次commit 提交以后的（不包括第一次提交）都生成patch,如上图所示：使用命令："),a("code",[s._v("git format-patch e795fefabc")]),s._v("然后生成的patch文件如下图所示\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20170113172040659.jpg",alt:"'git format-patch'",title:"git format-patch"}})])],1),s._v(" "),a("p",[s._v("打入patch 的方法：把生成的patch 文件copy 到一个文件夹中来（这里我创建了patch 文件夹）。如下图所示\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20170113172707460.jpg",alt:"'git format-patch'",title:"git format-patch"}})])],1),s._v(" "),a("p",[s._v("在使用git am之前， 你要首先git am --abort 一次，来放弃掉以前的am信息，这样才可以进行一次全新的am。不然会遇到这样的错误。"),a("code",[s._v(".git/rebase-apply still exists but mbox given.")]),s._v("git am 可以一次合并一个文件，或者一个目录下所有的patch，如下图所示：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20170113173503147.jpg",alt:"'git format-patch'",title:"git format-patch"}})])],1),s._v(" "),a("h3",{attrs:{id:"演示打补丁冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#演示打补丁冲突"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 演示打补丁冲突")]),s._v(" "),a("hr"),s._v(" "),a("ol",[a("li",[a("code",[s._v("git format-patch -1")]),s._v("生成补丁\n生成一个patch:0001-modify-contents.patch,又或许这个patch是别人给你的")]),s._v(" "),a("li",[a("code",[s._v("git am 0001-modify-contents.patch")]),s._v("应用补丁,出现下面的log,说明am的过程发生了错误")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    Applying: modify contents\n    error: file1.c: does not match index\n    error: patch failed: file2.c:0\n    error: file2.c: patch does not apply\n    error: patch failed: file3.c:0\n    error: file3.c: patch does not apply\n    Patch failed at 0001 modify contents\n    The copy of the patch that failed is found in: .git/rebase-apply/patch\n    When you have resolved this problem, run "git am --continue".\n    If you prefer to skip this patch, run "git am --skip" instead.\n    To restore the original branch and stop patching, run "git am --abort".\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[s._v("git status")]),s._v("可以看到下面的log.说明am过程暂时停止了,但是还处在am的对话中.")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('       You are in the middle of an am session.\n      (fix conflicts and then run "git am --continue")\n      (use "git am --skip" to skip this patch)\n      (use "git am --abort" to restore the original branch)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[s._v("git apply --reject 0001-modify-contents.patch")]),s._v("强制应用出现下面的log,说明file1,file2,file3发生了冲突,无法自动合并,实际上产生了三份应用补丁后的rej文件:")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    Checking patch file1.c...\n    error: while searching for:\n\n    error: patch failed: file1.c:0\n    Checking patch file2.c...\n    error: while searching for:\n\n    error: patch failed: file2.c:0\n    Checking patch file3.c...\n    error: while searching for:\n\n    error: patch failed: file3.c:0\n    Applying patch file1.c with 1 reject...\n    Rejected hunk #1.\n    Applying patch file2.c with 1 reject...\n    Rejected hunk #1.\n    Applying patch file3.c with 1 reject...\n    这时候在当前的目录下针对patch fail的文件会生成fileX.rej.这些文件的内容就是发生冲突的地方, 手动修正就好.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("将修正好的（fileX.rej.文件处理后改名）fileX.c add到缓冲区里去.")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  git add .\n  假设本文件夹下还有一些是untracked的文件的话,还是建议用git add 特定的文件比较好\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"6"}},[a("li",[a("code",[s._v("git am --resolved")]),s._v("然后就会显示")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    Applying: XXXXX.\n    XXXXX就是那笔patch本身的log信息\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"7"}},[a("li",[s._v("然后git log 就能看到那笔patch打上去了")])]),s._v(" "),a("h2",{attrs:{id:"diff-patch-ed-git-diff前世今生"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff-patch-ed-git-diff前世今生"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" diff/patch/ed,git diff前世今生")]),s._v(" "),a("p",[s._v("diff是Unix系统的一个很重要的工具程序。它用来比较两个文本文件的差异，是代码版本管理的基石之一。由于历史原因，diff有三种格式：")]),s._v(" "),a("ul",[a("li",[s._v("正常格式（normal diff）")]),s._v(" "),a("li",[s._v("上下文格式（context diff）")]),s._v(" "),a("li",[s._v("合并格式（unified diff）")])]),s._v(" "),a("p",[s._v("比如新建两个示例文件，第一个文件叫做f1，内容是每行一个a，一共7行")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("a\na\na\na\na\na\na\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("第二个文件叫做f2，修改f1而成，第4行变成b，其他不变。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("a\na\na\nb\na\na\na\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"normal模式的diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normal模式的diff"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" Normal模式的diff")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("现在对f1和f2进行比较"),a("code",[s._v("diff f1 f2")]),s._v(",这时，diff就会显示正常格式)(默认Normal模式与添加命令行参数--normal一样)的结果：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("4c4\n< a\n---\n> b\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("第一行是一个提示，用来说明变动位置。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('4c4\n它分成三个部分：前面的"4"，表示f1的第4行有变化\n中间的"c"表示变动的模式是内容改变（change），其他模式还有"增加"（a，代表addition）和"删除"（d，代表deletion）\n后面的"4"，表示变动后变成f2的第4行\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("第二行分成两个部分。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('　< a\n前面的小于号，表示要从f1当中去除该行（也就是第4行），后面的"a"表示该行的内容。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("第三行用来分割f1和f2。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("---\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("第四行，类似于第二行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('> b\n前面的大于号表示f2增加了该行，后面的"b"表示该行的内容。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("最早的Unix（即AT&T版本的Unix），使用的就是这种格式的diff。为了直观查看两个文件的不同我在windows下面通过BeyondCompare工具列出两个文件的不同，而截图下面的黑色部分则是diff的比较输出截图")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("第一个文件比第二个文件少了行的情况\n"),a("img",{attrs:{src:"/vuebloger/img/post/o_2.a.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("第一个文件比第二个文件多出行的情况\n"),a("img",{attrs:{src:"/vuebloger/img/post/o_1.d.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("第一个文件与第二个文件不相同的情况\n"),a("img",{attrs:{src:"/vuebloger/img/post/o_3.c.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("比较两个目录")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"/vuebloger/img/post/o_5.direct.png",alt:""}})]),s._v(" "),a("p",[s._v("另外比较目录的时候有两个参数很有用，-r 和 -q  ，前者表示递归比较目录中的子目录，后者表示仅仅列出两个目录中有哪些文件不同，")]),s._v(" "),a("h3",{attrs:{id:"context模式的diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context模式的diff"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" Context模式的diff")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("上个世纪80年代初，加州大学伯克利分校推出BSD版本的Unix时，觉得diff的显示结果太简单，最好加入上下文，便于了解发生的变动。因此，推出了上下文格式的diff。")]),s._v(" "),a("p",[s._v("它的使用方法是加入c参数（代表context）,"),a("code",[s._v("diff -c f1 f2")]),s._v(",显示结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("*** f1 2012-08-29 16:45:41.000000000 +0800\n--- f2 2012-08-29 16:45:51.000000000 +0800\n***************\n*** 1,7 ****\n a\n a\n a\n!a\n a\n a\n a\n--- 1,7 ----\n a\n a\n a\n!b\n a\n a\n a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("这个结果分成四个部分。")]),s._v(" "),a("p",[s._v("第一部分的两行，显示两个文件的基本情况：文件名和时间信息。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('　*** f1 2012-08-29 16:45:41.000000000 +0800\n　--- f2 2012-08-29 16:45:51.000000000 +0800\n  //"***"表示变动前的文件，"---"表示变动后的文件。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("第二部分是15个星号，将文件的基本情况与变动内容分割开。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("　　***************\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("第三部分显示变动前的文件，即f1。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('*** 1,7 ****\n a\n a\n a\n!a\n a\n a\n a\n//这时不仅显示发生变化的第4行，还显示第4行的前面三行和后面三行，因此一共显示7行\n//所以，前面的"*** 1,7 ****"就表示，从第1行开始连续7行\n//另外，文件内容的每一行最前面，还有一个标记位。如果为空，表示该行无变化；如果是感叹号（!），表示该行有改动\n//如果是减号（-），表示该行被删除；如果是加号（+），表示该行为新增\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("第四部分显示变动后的文件，即f2。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("--- 1,7 ----\n a\n a\n a\n!b\n a\n a\n a\n//除了变动行（第4行）以外，也是上下文各显示三行，总共显示7行\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("img",{attrs:{src:"/vuebloger/img/post/o_4.context.png",alt:""}})]),s._v(" "),a("p",[s._v("接下来说明这两个文件以diff  -c 方式比较的结果：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/vuebloger/img/post/o_4.context1.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"unified模式的diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unified模式的diff"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" Unified模式的diff")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v('如果两个文件相似度很高，那么上下文格式的diff，将显示大量重复的内容，很浪费空间。1990年，GNU diff率先推出了"合并格式"的diff，将f1和f2的上下文合并在一起显示。')]),s._v(" "),a("p",[s._v("它的使用方法是加入u参数（代表unified）。"),a("code",[s._v("diff -u f1 f2")]),s._v(",显示结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("--- f1 2012-08-29 16:45:41.000000000 +0800\n+++ f2 2012-08-29 16:45:51.000000000 +0800\n@@ -1,7 +1,7 @@\n a\n a\n a\n-a\n+b\n a\n a\n a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("它的第一部分，也是文件的基本信息。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('--- f1 2012-08-29 16:45:41.000000000 +0800\n+++ f2 2012-08-29 16:45:51.000000000 +0800\n//"---"表示变动前的文件，"+++"表示变动后的文件。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("第二部分，变动的位置用两个@作为起首和结束。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@@ -1,7 +1,7 @@\n//前面的"-1,7"分成三个部分：减号表示第一个文件（即f1），"1"表示第1行，"7"表示连续7行。\n//合在一起，就表示下面是第一个文件从第1行开始的连续7行。\n//同样的，"+1,7"表示变动后，成为第二个文件从第1行开始的连续7行。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("第三部分是变动的具体内容。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' a\n a\n a\n-a\n+b\n a\n a\n a\n//除了有变动的那些行以外，也是上下文各显示3行。它将两个文件的上下文，合并显示在一起，所以叫做"合并格式"。\n//每一行最前面的标志位，空表示无变动，减号表示第一个文件删除的行，加号表示第二个文件新增的行。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("img",{attrs:{src:"/vuebloger/img/post/o_4.context.png",alt:""}})]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("diff –u")]),s._v("比较的结果：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/vuebloger/img/post/o_5.u.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"git格式的diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git格式的diff"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git格式的diff")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("版本管理系统git，使用的是合并格式diff的变体。"),a("code",[s._v("git diff")]),s._v(",显示结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("diff --git a/f1 b/f1\n　　index 6f8a38c..449b072 100644\n　　--- a/f1\n　　+++ b/f1\n　　@@ -1,7 +1,7 @@\n　　 a\n　　 a\n　　 a\n　　-a\n　　+b\n　　 a\n　　 a\n　　 a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("第一行表示结果为git格式的diff。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("diff --git a/f1 b/f1\n//进行比较的是，a版本的f1（即变动前）和b版本的f1（即变动后）。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("第二行表示两个版本的git哈希值（index区域的6f8a38c对象，与工作目录区域的449b072对象进行比较），最后的六位数字是对象的模式（普通文件，644权限）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("index 6f8a38c..449b072 100644\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("第三行表示进行比较的两个文件。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('--- a/f1\n+++ b/f1\n//"---"表示变动前的版本，"+++"表示变动后的版本。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("后面的行都与官方的合并格式diff相同。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("　@@ -1,7 +1,7 @@\n　　 a\n　　 a\n　　 a\n　　-a\n　　+b\n　　 a\n　　 a\n　　 a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"linux中diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux中diff"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" linux中diff")]),s._v(" "),a("hr"),s._v(" "),a("ol",[a("li",[s._v("diff常用参数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("-b  --ignore-space-change 忽略空格，如果两行进行比较，多个连续的空格会被当作一个空格处理，\n# 同时会忽略掉行尾的空格差异。\n-w --ignore-all-space 忽略所有空格，忽略范围比-b更大，包括很多不可见的字符都会忽略。\n-B 忽略空白行。\n-y  输出两列，一个文件一列，有点类似GUI的输出外观了，这种方式输出更加直观。\n-W 大写W，当指定-y的时候设置列的宽度，默认是130\n-x, --exclude=PAT 比较目录的时候排除指定PAT模式的文件名的比较\n-i, --ignore-case 忽略两个文件中大小写的不同\n-e 将比较的结果保存成一个ed脚本，之后ed程序可以执行该脚本文件，\n# 从而将file1修改成与file2的内容相同，这一般在patch的时候有用。\n-r 如果比较两个目录，-r参数会比较其下同名的子目录\n-q 输出结果中，只指出两个文件不同，而不输出两个文件具体内容的比较，\n# 这在比较两个目录的时候很好用。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[s._v("diff -e 1.txt 2.txt > script.txt")]),s._v("这样就是生成了一个ed可以执行的脚本文件script.txt，生成脚本文件之后我们还需要做一个操作， 在脚本文尾添加ed的write指令，只需要执行"),a("code",[s._v('echo "w" >>script.txt')]),s._v("将w指令附加到脚本文件的最后一行即可。")]),s._v(" "),a("li",[s._v("那么如何应用该脚本文件呢，可以这样使用"),a("code",[s._v("ed - 1.txt < script.txt")]),s._v("注意中间的"),a("code",[s._v("–")]),s._v("符号表示从标准输入中读取，而"),a("code",[s._v("< script.txt")]),s._v("则重定向script.txt的内容到标准输入。这样执行之后1.txt的内容将与2.txt完全相同。")]),s._v(" "),a("li",[s._v("并排格式vs普通格式输出\n"),a("ul",[a("li",[s._v('"|"表示前后2个文件内容有不同')]),s._v(" "),a("li",[s._v('"<"表示后面文件比前面文件少了1行内容')]),s._v(" "),a("li",[s._v('">"表示后面文件比前面文件多了1行内容')])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("并排格式输出\n[root@localhost test3]# diff log2014.log log2013.log  -y -W 50\n2013-01                 2013-01\n2013-02                 2013-02\n2014-03               | 2013-03\n2013-04                 2013-04\n2013-05                 2013-05\n2013-06                 2013-06\n2013-07                 2013-07\n2013-07               | 2013-08\n2013-09                 2013-09\n2013-10                 2013-10\n2013-11               <\n2013-12               <\n[root@localhost test3]# diff log2013.log log2014.log  -y -W 50\n2013-01                 2013-01\n2013-02                 2013-02\n2013-03               | 2014-03\n2013-04                 2013-04\n2013-05                 2013-05\n2013-06                 2013-06\n2013-07                 2013-07\n2013-08               | 2013-07\n2013-09                 2013-09\n2013-10                 2013-10\n                      > 2013-11\n                      > 2013-12\n普通格式输出\n[root@localhost test3]# diff log2014.log log2013.log\n3c3\n< 2014-03\n---\n> 2013-03\n8c8\n< 2013-07\n---\n> 2013-08\n11,12d10\n< 2013-11\n< 2013-12\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br")])]),a("h3",{attrs:{id:"linux命令ed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux命令ed"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" linux命令ed")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("在 unix/linux 平台下，首先要学习的就是文本编辑，而 ed 编辑器是 unix/linux 操作系统下最简单、最典型\n的文本编辑器，因此，学习 ed 编辑器能够帮助你很好的理解一般的文本操作,而且还可以为你以后学习 unix/linux\n下的一些常用命令(如 grep,sed,...）打下基础。")]),s._v(" "),a("p",[s._v("ed 编辑器是以行为单位对文本进行操作的编辑器，也就是说一次仅能编辑一行，非以全屏的方式来操作，而不像 vi/vim\n那样是以整个屏幕框架为单位对文本进行编辑。ed 简单、易用，也正是由于其小巧玲珑，许多文本操作者现在仍然偏爱它，\n使用它。")]),s._v(" "),a("p",[s._v("ed 编辑器可以用于创建、修改、显示文本文件。当 ed 打开一文本文件时，将复制文件的内容到 ed 命令的缓存中， 在\ned 中的所有命令操作只作用于缓存中的内容，而不会对源文件有任何影响,除非对源文件进行 w(写) 操作。 ed 有命令模式\n和输入模式两种状态，类似于 vi/vim 的两种模式，ed 在命令模式下输入的是命令，这些命令用来指定对编辑文本的操作；\ned 在输入模式下输入的是文本，这些文本将依照命令模式下输入的命令被添加或替换到文本中。当第一次被调用时，ed 默\n认进入命令模式，当输入 a、c 或 i 命令后即进入输入模式,在输入模式下,单行输入 '.' 然后回车,则回到命令模式。")]),s._v(" "),a("blockquote",[a("p",[s._v("ed 调用")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ed [-GVhl] [-p string] [file]\n注解:\nfile                指定将要编辑的文件(如果文件名以叹号开头 '!file'，应用反斜杠引用叹号 '\\!file'，否则，ed 将视 file\n                命令的输出为编辑内容。)\n-G                兼容模式\n-V                输出 ed 版本信息\n-h                显示 ed 帮助信息\n-l                强制退出状态为 0(即使操作中出现错误)\n-p string         指定命令模式下的提示符\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("blockquote",[a("p",[s._v("ed 命令格式")])]),s._v(" "),a("p",[s._v("ed 命令格式为：[address [,address]]command[parameters]")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("地址(address,[,address]) 是用来指定命令(command)的作用范围的。如果没给出地址，则为默认地址。ed 读入文件后，当前\n行默认为文件最后一行,如果文件为空，则当前行号设置为 0。\n命令(command) 会根据指定的地址（或默认地址）对编辑文本进行操作。当输入一非法命令，ed 将会显示一问号 '?' 来提示\n输入命令错误。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("blockquote",[a("p",[s._v("ed 地址")])]),s._v(" "),a("p",[s._v("地址由下面基本的元素构成，其后也可跟加 '+'、'-'、' ' 和数字来表示自己所需要的地址。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(".             当前行\n$             文本最后一行\nn             文本第 n 行（ n 为数字，下同；m 亦是 ）\n-n             从文本当前行数起，向前第 n 行\n+n             从文本当前行数起，向后第 n 行\n-             相当于 -1 行地址\n+             相当于 +1 行地址\nm，n             文本的第 m 到 n 行\n,             文本的所有行\n;             文本当前行到最后一行\n/reg/             从文本当前行数起，下一个匹配 reg 的行\n?reg?             从文本当前行数起，上一个匹配 reg 的行\n'x             由 k 命令标记的行（ x 为一小写字母 ）\n正则表达式如下：(只涉及 ed 所支持的正则表达式)\n.                   匹配任何单个字符。\n[char-class]           匹配任何一个在 char-class 里的单个字符。如果中间出现 '-' ，则意为其左边的字符和其右边的\n                   字符之间的所有字符。例如，[abc] 匹配 a 或 b 或 c；[a-z] 匹配任意一个小写字母(a、b、c、\n                    ...、z)，[0-9] 匹配任意一个数字(0、1、2、...、9)。\n                    char-class 也可以为一些字符集。如下：\n                   [:alpha:] 相当于 [a-zA-Z]\n                   [:lower:] 相当于 [a-z]\n                   [:upper:] 相当于 [A-Z]\n                   [:digit:] 相当于 [0-9]\n                   [:alnum:] 相当于 [a-zA-Z0-9]\n                   [:blank:] 匹配 ' '(空格)、 '\\t'(制表符)\n                   [:space:] 匹配 ' '(空格)、'\\t'(制表符)、'\\n'(新行)、'\\f'()、'\\v'(垂直制表符)、'\\r'(回车符)\n                   [:cntrl:] 匹配控制字符。在 ASCII 码中，这些控制字符是从八进制数字 000 到 037, 和 177 (DEL)\n                   [:print:] 匹配 相当于 [:alnum:]、[:punct:] 和 空格\n                   [:graph:] 匹配 相当于 [:alnum:] 、 [:punct:]\n                   [:punct:] 匹配 `! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { | } ~ ' 等标点符号\n                   [:xdigit:] 匹配十六进制字符 '0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f'\n[^char-class]            匹配 [char-class] 的补集，即匹配任意一个不在 char-class 里的单个字符\n*                    匹配前面的子表达式零次或多次。例如，'ab*' 能匹配 \"a\" 以及 \"abb\"。 * 等价于'\\{0,\\}'\n\\+                   匹配前面的子表达式一次或多次。例如，'ab\\+' 能匹配 \"ab\" 以及 \"abb\"，但不能匹配 \"a\"。\\+ 等\n                   价于 \\{1,\\}\n\\?                   匹配前面的子表达式零次或一次。例如，\"word(s)\\?\" 可以匹配 \"word\" 或 \"words\" 。\\? 等价于\n                     \\{0,1\\}\n\\{n,m\\}           m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。 \"a{1,3}\" 将匹配 \"baaaaab\"\n                   中的前三个 a。'a{0,1}' 等价于 'a\\?'。请注意在逗号和两个数之间不能有空格\n\\{n,\\}                   n 是一个非负整数。至少匹配n 次。例如，'a\\{2,\\}' 不能匹配 \"abc\" 中的 'a'，但能匹配\n                  \"baaaaab\"中的所有 a。'a\\{1,\\}' 等价于 'a\\+'。'a\\{0,\\}' 则等价于 'a*'\n\\{n\\}                   n 是一个非负整数。匹配确定的 n 次。例如，'a\\{2\\}' 不能匹配 \"bab\" 中的 'a'，但是能匹配\n                   \"baab\"中的两个 a\n^                   匹配输入字符串的开始位置\n$                   匹配输入字符串的结束位置\n\\<                   匹配一个单词的前边界。例如，'\\<el' 匹配 \"element\",但不能匹配 \"help\"\n\\>                   匹配一个单词的后边界。例如，'ly\\>' 匹配 \"lovely\"，但不匹配 \"lying\"\n\\b                   匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，\n                   但不能匹配\"verb\" 中的 'er'\n\\B                   匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'\n\\w                   匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'\n\\W                   匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'\n\\`                   匹配一个句子的边界\n\\(\\)                   定义向后引用。'\\n'(n为一正整数)代表第 n 个括号中匹配的字符串\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br")])]),a("blockquote",[a("p",[s._v("ed 命令")])]),s._v(" "),a("p",[s._v("ed 命令都是单个字符，其中一些命令有一些选项。如果一命令超过一行，应使 '' 结束每一行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("命令如下：(括号内为默认地址)\n(.)a            切换到输入模式,将新输入的文本追加到指定行的后面，当前行被设为输入文本的最后一行\n(.)i            切换到输入模式,将新输入的文本插入到指定行的前面，当前行被设为输入文本的最后一行\n(.,.)c          切换到输入模式,将新输入的文本替换成指定行，当前行被设为输入文本的最后一行\n(.,.)d          删除指定行，如果被删除的文本后还有文本行，则当前行被设为该行，否则设为被删除的文本的\n                上一行\n(.+1)          无命令时，默认 p 命令，但打印下一行内容，当前行被设为打印行\n(.+1)zn        一次跳动 n 行，如果未指出 n ，默认当前终端屏幕大小，当前行被设为最后被打印的行\n(.,.)p         打印指定行，当前行被设为打印行的最后一行\nP               ed 命令模式下提示符开关命令，默认提示符为 '*'\n(.,.)l          在每行最后加一 '$' 符号指定结尾，并打印输出\n(.,.)n         打印指定行号和内容，行号与行内容用制表符分割,当前行被设为打印行的最后一行\n($)=           打印指定行行号\n(.,.)#         注释行，将被忽略\n(.)k char      用一小写字母标记指定行\n(.,.)s/reg/replacement/\n(.,.)s/reg/replacement/g\n(.,.)s/reg/replacement/n\n                              替换指定行命令\n(.,.)s                   重复上一次替换命令，当前行被设为最后一个被改变的行\n(1,$)g/reg/cmd-list     所有匹配 '/reg/' 的行执行 cmd-list 命令，在命令执行前，当前行被设为匹配行。当所有匹配\n                         行执行完命令后，当前行被设定为最后一个匹配行。cmd-list 中每一行只能有一个命令，但有多\n                         个命令时，应以 '\\' 结束每一行\n(1,$)G/reg/              与 g/reg/cmd-list 相似，但匹配的每一行所执行的命令由用户各个定义。\n(1,$)v/reg/cmd-list      与 g/reg/cmd-list 相反，指不匹配行\n(1,$)V/reg/              与 G/reg/ 相反，指不匹配行\n(.,.+1)j                          合并指定行内容,当前行被设为合并行\n(.,.)m(.)                移动左边源指定行到右边目的指定行后,当前行被设为移动行的最后一行\n(.,.)t(.)                 复制左边源指定行到右边目的指定行后，当前行被设为复制行的最后一行\n(.,.)y                   复制指定行到缓存，当前行不改变\n(.)x                     复制缓存内容到指定行后，当前行被设为复制行的最后一行\nu                        撤销上一次命令，当前地址被设为上一次地址\nh                        打印最后一个错误说明\nH                        错误说明开关，默认不输出\ne file                    编辑文件并设定文件名\nE file                    强制编辑文件，同 e file，但丢失以前的修改，不做警告\n!cmd                    执行 shell 命令 cmd\ne !cmd                  先将ed 缓冲区清除，替换 cmd 命令的输出\nf file                    设置文件名，如果每给出 file 参数，则打印文件名\n($)r file                 把指定文件内容追加到指定行后，当前行被设为追加文本的最后一行\n($)r !cmd               把命令的输出追加到指定行后，当前行被设为追加文本的最后一行\n(1,$)w file               保存指定文本内容到指定文件(覆盖保存)\n(1,$)W file              保存指定文本内容到指定文件(追加保存)，当前行不改变\n(1,$)w !cmd            输出指定文本内容到 cmd 的标准输入，当前行不改变\n(1,$)wq flie             保存指定文本内容到指定文件(覆盖保存)，并退出编辑器\nq                  退出 ed 编辑器，退出前若所作的修改没保存，发出警告\nQ                  强制退出 ed 编辑器，同 q 命令，但退出前若所作的修改没保存，不警告\nP                  ed 命令提示符显示开关。 '*' 为 ed 默认提示符，利用 ed 命令 -p 选项，其可被更改为任意字符\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br")])]),a("blockquote",[a("p",[s._v("Linux ed 完整实例解析：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ ed              <- 激活 ed 命令\na                 <- 告诉 ed 我要编辑新文件\nMy name is Titan. <- 输入第一行内容\nAnd I love Perl very much. <- 输入第二行内容\n.                 <- 返回 ed 的命令行状态\ni                 <- 告诉 ed 我要在最后一行之前插入内容\nI am 24.          <- 将“I am 24.”插入“My name is Titan.”和“And I love Perl very much.”之间\n.                 <- 返回 ed 的命令行状态\nc                 <- 告诉 ed 我要替换最后一行输入内容\nI am 24 years old. <- 将“I am 24.”替换成“I am 24 years old.”（注意：这里替换的是最后输的内容）\n.                 <- 返回 ed 的命令行状态\nw readme.text     <- 将文件命名为“readme.text”并保存（注意：如果是编辑已经存在的文件，只需要敲入 w 即可）\nq                 <- 完全退出 ed 编辑器\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("这是文件的内容是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cat readme.text\nMy name is Titan.\nI am 24 years old.\nAnd I love Perl vrey much.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"linux命令patch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux命令patch"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" Linux命令patch")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("diff命令在制作patch文件的时候，基本上只需要使用到diff -Nau 这个参数，如果比较的是文件夹，还要加上-r参数，所以一般直接使用Naur参数,-Naur参数属于固定用法，大多数时候，在使用diff命令时搭配这个参数就可以了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("-N或--new-file 　在比较目录时，若文件A仅出现在某个目录中，预设会显示。\n-a或--text 　diff预设只会逐行比较文本文件。\n-r或--recursive 　比较子目录中的文件。\n-u,-U<列数>或--unified=<列数> 以合并的方式来显示文件内容的不同（Unified模式）。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("我打算是建立一个级联目录./x/xx/xxx/，在xxx目录下建立两个不同的文件xxx1,xxx2。然后在xxx目录下用diff命令，建立一个补丁文件xxx.patch，在xx目录下建立一个补丁文件xx.patch，在x目录下建立一个补丁文件x.patch。然后在这三个目录下实验述说patch")]),s._v(" "),a("p",[s._v("开始实验：建立实验目录")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[King@Fedora ~]$ mkdir -pv x/xx/xxx     //如果想看看mkdir到底做了什么，可以添加选项“-v”\nmkdir: 已创建目录 “x”\nmkdir: 已创建目录 “x/xx”\nmkdir: 已创建目录 “x/xx/xxx”\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("进入xxx目录下创建xxx1,xxx2")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[King@Fedora ~]$ cd x/xx/xxx\n[King@Fedora xxx]$ cat >> xxx1 << EOF\n> 111111\n> 111111\n> EOF\n[King@Fedora xxx]$ cat >> xxx2 << EOF\n> 111111\n> 222222\n> EOF\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("查看这两个文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[King@Fedora xxx]$ diff -y xxx1 xxx2  //-y, --side by side 以2列格式输出 -W, --width=500可以指定宽度\n111111                                111111\n111111                           |    222222\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("接下来请注意打补丁时所在的目录以及补丁文件的上下文路径")])]),s._v(" "),a("p",[s._v("在xxx目录下创建补丁文件xxx.patch，并查看。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[King@Fedora xxx]$ diff -Naru xxx1 xxx2 > xxx.patch\n[King@Fedora xxx]$ cat xxx.patch\n--- xxx1    2009-12-19 22:28:26.582959182 +0800\n+++ xxx2    2009-12-19 22:28:42.798928591 +0800\n@@ -1,2 +1,2 @@\n  111111\n- 111111\n+222222\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在xx目录下创建补丁文件xx.patch，并查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[King@Fedora xxx]$ cd ..\n[King@Fedora xx]$ diff -Naru xxx/xxx1 xxx/xxx2 > xx.patch\n[King@Fedora xx]$ cat xx.patch\n--- xxx/xxx1    2009-12-19 22:28:26.582959182 +0800\n+++ xxx/xxx2    2009-12-19 22:28:42.798928591 +0800\n@@ -1,2 +1,2 @@\n111111\n-111111\n+222222\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("在x目录下创建补丁文件x.patch，并查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[King@Fedora xx]$ cd ..\n[King@Fedora x]$ diff -Nu xx/xxx/xxx1 xx/xxx/xxx2 > x.patch\n[King@Fedora x]$ cat x.patch\n--- xx/xxx/xxx1    2009-12-19 22:28:26.582959182 +0800\n+++ xx/xxx/xxx2    2009-12-19 22:28:42.798928591 +0800\n@@ -1,2 +1,2 @@\n111111\n-111111\n+222222\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("现将patch文件都拷贝到xxx目录下去。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[King@Fedora x]$ cp x.patch xx/xxx/\n[King@Fedora x]$ cp xx/xx.patch xx/xxx/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("进入xxx目录开始实验")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[King@Fedora x]$ cd xx/xxx\n[King@Fedora xxx]$ ls\nx.patch  xx.patch  xxx1  xxx2  xxx.patch\n\n[King@Fedora xxx]$ patch -p0 < xxx.patch  #用第二个的补丁修改第一个文件(注意生成时的正反向)\npatching file xxx1\n[King@Fedora xxx]$ cat xxx1\n111111\n222222\n[King@Fedora xxx]$ patch -RE < xxx.patch #用第一个的补丁修改第一个文件（还原）\npatching file xxx1\n[King@Fedora xxx]$ cat xxx1\n111111\n111111\n\n[King@Fedora xxx]$ patch -p1 < xx.patch\npatching file xxx1\n[King@Fedora xxx]$ cat xxx1\n111111\n222222\n[King@Fedora xxx]$ patch -RE < xxx.patch\npatching file xxx1\n[King@Fedora xxx]$ cat xxx1\n111111\n111111\n\n[King@Fedora xxx]$ patch -p2 < x.patch\npatching file xxx1\n[King@Fedora xxx]$ cat xxx1\n111111\n222222\n[King@Fedora xxx]$ patch -RE < x.patch\npatching file xxx1\n[King@Fedora xxx]$ cat xxx1\n111111\n111111\n\n--------------------接下来在xx目录执行\n[King@Fedora xx]$ patch-p0 < xx.patch  # 用第二个的 补丁 修改 第一个文件\npatching file xxx1\n[King@Fedora xxx]$ cat xxx1\n111111\n222222\n[King@Fedora xx]$ patch -RE < xx.patch #用第一个的 补丁 修改 第一个文件\npatching file xxx1\n[King@Fedora xxx]$ cat xxx1\n111111\n111111\n\n[King@Fedora xx]$ patch -p1 < x.patch\npatching file xxx1\n[King@Fedora xx]$ cat xxx1\n111111\n222222\n[King@Fedora xx]$ patch -RE < x.patch\npatching file xxx1\n[King@Fedora xx]$ cat xxx1\n111111\n111111\n----------------------------接下来在x目录执行\n[King@Fedora x]$ patch -p0< x.patch  # 用第二个的补丁修改第一个文件\npatching file xxx1\n[King@Fedora x]$ cat xxx1\n111111\n222222\n[King@Fedora x]$ patch -RE < x.patch #用第一个的补丁修改第一个文件\npatching file xxx1\n[King@Fedora x]$ cat xxx1\n111111\n111111\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("patch -p后面是不能带负数的。不使用p参数的时候，patch命令会忽略任何目录，直接使用文件。")])]),s._v(" "),a("blockquote",[a("p",[s._v("再举一个深入的例子")])]),s._v(" "),a("p",[s._v("保证当前目录是demo目录")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# mkdir demo\n# cd demo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("先模拟一个项目目录old")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# mkdir -p old/a/b\n# vi old/a/b/foo.txt\nold_line_1\nold_line_2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("假设我们发现项目old有bug代码，下面我们先拷贝一个新目录new，并在此修改bug代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# cp -r old new\n# vi new/a/b/foo.txt\nnew_line_1\nnew_line_2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("保证old和new两个目录都在当前目录下，下面就可以使用diff命令了(不要使用绝对路径，而应该使用相对路径)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# LC_ALL=C TZ=UTC0 diff -Naur old new > foo.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果不在意字符集，时差等问题，也可以省略LC_ALL=C TZ=UTC0环境变量：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# diff -Naur old new > foo.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("其中-Naur参数属于固定用法，大多数时候，在使用diff命令时搭配这个参数就可以了。")]),s._v(" "),a("p",[s._v("大概浏览一下补丁文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# cat foo.patch\ndiff -Naur old/a/b/foo.txt new/a/b/foo.txt\n--- old/a/b/foo.txt     2009-12-07 20:40:07.000000000 +0800\n+++ new/a/b/foo.txt     2009-12-07 20:41:51.000000000 +0800\n@@ -1,2 +1,2 @@\n-old_line_1\n-old_line_2\n+new_line_1\n+new_line_2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("加减号后面的内容是有用的内容，其他的内容是方便你查阅的相关信息内容，补丁制作完成。")]),s._v(" "),a("p",[s._v("此时的文件目录结构大概如下所示：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#tree\ndemo\n|-- old\n|   `-- a\n|       `-- b\n|           `-- foo.txt\n|-- new\n|   `-- a\n|       `-- b\n|           `-- foo.txt\n-- foo.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("下面看看如何使用patch来应用补丁，要注意的是当前目录是demo，试试下面命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# patch -p0 < foo.patch\npatching file old/a/b/foo.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这里p0的含义，因为在foo.patch补丁文件里的路径信息是这样的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("--- old/a/b/foo.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("p表示跳过几级目录，因为是在demo目录下使用的patch命令，old目录就在demo目录下，所以不必跳过任何目录，而应该使用old/a/b/foo.txt完整路径，所以此时使用的是p0。")]),s._v(" "),a("p",[s._v("查看一下目标文件，你会发现内容已经修改成新的了：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# cat old/a/b/foo.txt\nnew_line_1\nnew_line_2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("此时如果你再次使用patch命令，系统会问你是否想还原，输入y 还原：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# patch -p0 < foo.patch\npatching file old/a/b/foo.txt\nReversed (or previously applied) patch detected!  Assume -R? [n] y\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("查看一下目标文件，你会发现内容已经还原成旧的了：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# cat old/a/b/foo.txt\nold_line_1\nold_line_2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果你想严格指定是 应用补丁 可以使用下面命令（就是增加N参数,-N或--forward）：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# patch -Np0 < foo.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果你想严格指定是 还原补丁 可以使用下面命令（就是增加R参数）：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# patch -Rp0 < foo.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我们改变一下当前路径")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# cd old\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("此时就应该是p1，而不是p0了，引用foo.patch文件的路径也要相对变一下，因为当前目录已经是old了")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# patch -p1 < ../foo.patch\npatching file a/b/foo.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("因为此时我们是在old下使用patch命令，和a子目录平级，而补丁文件foo.patch里的路径声明是")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("--- old/a/b/foo.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也就是说第一个斜线左边的old/部分已经没用了，这就是p1的含义")]),s._v(" "),a("p",[s._v("继续往深度变换路径，依次测试使用p2,p3参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# cd a\n\n# patch -p2 < ../../foo.patch\npatching file b/foo.txt\n\n# cd b\n\n# patch -p3 < ../../../foo.patch\npatching file foo.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("在本例中，p3已经是最深目录了，此时可以省略p参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# patch < ../../../foo.patch\npatching file foo.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("也就是说，不使用p参数的时候，patch命令会忽略任何目录，直接使用文件。")]),s._v(" "),a("blockquote",[a("p",[s._v("为什么使用diff命令时最好不要使用绝对路径，而应该使用相对路径？")])]),s._v(" "),a("p",[s._v("答：如果你在使用diff的时候使用的是绝对路径，那么补丁文件里的文件路径信息会类似下面的样子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("--- /a/b/c/d/e/f/g/bar.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如此一来，当别人想应用你的补丁时，因为目录结构肯定有差异，所以就不得不费力判断到底使用p几。这样一来就很容易出错。\n相反，如果使用相对路径的话，大多数时候，p0或者p1就足够了，不易出错。")]),s._v(" "),a("blockquote",[a("p",[s._v("patch参数相关")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('-b或--backup 　备份每一个原始文件。\n-B<备份字首字符串>或--prefix=<备份字首字符串> 　设置文件备份时，附加在文件名称前面的字首字符串，该字符串可以是路径名称。\n-c或--context 　把修补数据解译成关联性的差异。\n-d<工作目录>或--directory=<工作目录> 　设置工作目录。\n-D<标示符号>或--ifdef=<标示符号> 　用指定的符号把改变的地方标示出来。\n-e或--ed 　把修补数据解译成ed指令可用的叙述文件。\n-E或--remove-empty-files 　若修补过后输出的文件其内容是一片空白，则移除该文件。\n-f或--force 　此参数的效果和指定"-t"参数类似，但会假设修补数据的版本为新　版本。\n-F<监别列数>或--fuzz<监别列数> 　设置监别列数的最大值。\n-g<控制数值>或--get=<控制数值> 　设置以RSC或SCCS控制修补作业。\n-i<修补文件>或--input=<修补文件> 　读取指定的修补文件。\n-l或--ignore-whitespace 　忽略修补数据与输入数据的跳格，空格字符。\n-n或--normal 　把修补数据解译成一般性的差异。\n-N或--forward 　忽略修补的数据较原始文件的版本更旧，或该版本的修补数据已使用过,强制应用。\n-o<输出文件>或--output=<输出文件> 　设置输出文件的名称，修补过的文件会以该名称存放。\n-p<剥离层级>或--strip=<剥离层级> 　设置欲剥离几层路径名称。\n-f<拒绝文件>或--reject-file=<拒绝文件> 　设置保存拒绝修补相关信息的文件名称，预设的文件名称为.rej。\n-R或--reverse 　假设修补数据是由新旧文件交换位置而产生，还原文件。\n-s或--quiet或--silent 　不显示指令执行过程，除非发生错误。\n-t或--batch 　自动略过错误，不询问任何问题。\n-T或--set-time 　此参数的效果和指定"-Z"参数类似，但以本地时间为主。\n-u或--unified 　把修补数据解译成一致化的差异。\n-v或--version 　显示版本信息。\n-V<备份方式>或--version-control=<备份方式> 　用"-b"参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用"-z"参数变更，当使用"-V"参数指定不同备份方式时，也会产生不同字尾的备份字符串。\n-Y<备份字首字符串>或--basename-prefix=--<备份字首字符串> 　设置文件备份时，附加在文件基本名称开头的字首字符串。\n-z<备份字尾字符串>或--suffix=<备份字尾字符串> 　此参数的效果和指定"-B"参数类似，差别在于修补作业使用的路径与文件名若为src/linux/fs/super.c，加上"backup/"字符串后，文件super.c会备份于/src/linux/fs/backup目录里。\n-Z或--set-utc 　把修补过的文件更改，存取时间设为UTC。\n--backup-if-mismatch 　在修补数据不完全吻合，且没有刻意指定要备份文件时，才备份文件。\n--binary 　以二进制模式读写数据，而不通过标准输出设备。\n--help 　在线帮助。\n--nobackup-if-mismatch 　在修补数据不完全吻合，且没有刻意指定要备份文件时，不要备份文件。\n--verbose 　详细显示指令的执行过程。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h3",{attrs:{id:"diff总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff总结"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" diff总结")]),s._v(" "),a("hr"),s._v(" "),a("p",[a("code",[s._v("git diff")]),s._v("是在Linux命令diff上的变体，Linux命令diff分三种模式，打出的diff可以使用"),a("code",[s._v("ed/patch")]),s._v("应用或者还原,或者使用"),a("code",[s._v("git apply/am")])]),s._v(" "),a("h2",{attrs:{id:"git-am-keep-cr-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-am-keep-cr-的作用"}},[s._v("#")]),s._v(" git am --keep-cr 的作用")]),s._v(" "),a("blockquote",[a("p",[s._v("git-am 手册上说")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("With --keep-cr, call git mailsplit (see git-mailsplit(1)) with the same option, \nto prevent it from stripping CR at the end of lines. am.keepcr configuration \nvariable can be used to specify the default behaviour. --no-keep-cr is useful \nto override am.keepcr.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("blockquote",[a("p",[s._v("git-mailsplit手册上说")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("--keep-cr\nDo not remove \\r from lines ending with \\r\\n.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("patch文件中以\\r\\n结尾的行，git am默认行为会将回车符\\r移除。加上--keep-cr可以防止这一默认行为，即保留回车符。")]),s._v(" "),a("p",[s._v("如果不加这个参数，git am可能会报错。例如")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# git am  0001-test-commit-2.patch \nApplying: test commit 2\nerror: patch failed: tests/qemu-iotests/051.out:163\nerror: tests/qemu-iotests/051.out: patch does not apply\nPatch failed at 0001 test commit 2\nWhen you have resolved this problem run "git am --resolved".\nIf you would prefer to skip this patch, instead run "git am --skip".\nTo restore the original branch and stop patching run "git am --abort".\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("该错误比较隐蔽，经过仔细比对，发现是行尾的回车符导致patch失败。此时，或者修改patch文件，或者加上-keep-cr参数。这里采用后者。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# git am --keep-cr 0001-test-commit-2.patch \nApplying: test commit 2\n/tmp/root/rpmbuild/BUILD/qemu-1.5.3/.git/rebase-apply/patch:211: trailing whitespace.\nQEMU 1.5.50 monitor - type 'help' for more information\n/tmp/root/rpmbuild/BUILD/qemu-1.5.3/.git/rebase-apply/patch:212: trailing whitespace.\n(qemu) quit\nwarning: 2 lines add whitespace errors.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("git am执行成功。")]),s._v(" "),a("h2",{attrs:{id:"crlf、lf、cr详解及在git中应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crlf、lf、cr详解及在git中应用"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" CRLF、LF、CR详解及在git中应用")]),s._v(" "),a("blockquote",[a("p",[s._v("基本介绍")])]),s._v(" "),a("ul",[a("li",[s._v("CRLF: Carriage-Return Line-Feed的缩写，意思是回车换行，即\\r\\n;")]),s._v(" "),a("li",[s._v("LF: Line-Feed的缩写, 意思是换行，即\\n;")]),s._v(" "),a("li",[s._v("CR: Carriage-Return的缩写，回车，即\\r;")])]),s._v(" "),a("blockquote",[a("p",[s._v("当我们敲击回车键时，操作系统会插入不可见的字符表示换行，不同操作系统插入不同")])]),s._v(" "),a("ul",[a("li",[s._v("Windows: 插入\\r\\n, 回车换行；")]),s._v(" "),a("li",[s._v("Linux\\Unix: 插入\\n, 换行；")]),s._v(" "),a("li",[s._v("MacOS: 插入\\r，回车；")])]),s._v(" "),a("blockquote",[a("p",[s._v("Git")])]),s._v(" "),a("ol",[a("li",[s._v("AutoCRLF")])]),s._v(" "),a("ul",[a("li",[s._v("提交时转换为LF，检出时转换为CRLF")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git config --global core.autocrlf true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("提交时转换为LF，检出时不转换")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git config --global core.autocrlf input\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("提交检出均不转换")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git config --global core.autocrlf false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("SafeCRLF")])]),s._v(" "),a("ul",[a("li",[s._v("拒绝提交包含混合换行符的文件")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git config --global core.safecrlf true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("允许提交包含混合换行符的文件")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git config --global core.safecrlf false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("提交包含混合换行符的文件时给出警告")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git config --global core.safecrlf warn\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"git比较指定版本一个文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git比较指定版本一个文件"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git比较指定版本一个文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git diff\ngit show\ngit log -p\n--name-only// 只显示文件名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"git-diff对比工作，暂存，提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-diff对比工作，暂存，提交"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v("git diff对比工作，暂存，提交")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git diff: 对比工作区(未 git add)和暂存区(git add 之后)\ngit diff --cached: 对比暂存区(git add 之后)和版本库(git commit 之后)\ngit diff HEAD: 对比工作区(未 git add)和版本库(git commit 之后)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"显示更改了哪些文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示更改了哪些文件"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 显示更改了哪些文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git log -p commitid --name-only//显示那次commmit更改了那些文件，等同于git show commit -name-only\n\ngit diff commit --name-only//显示从那次提交到当前共改了那些文件\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"忽略git-diff中的空格或换行符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略git-diff中的空格或换行符"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 忽略git-diff中的空格或换行符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git diff --word-diff-regex = [^ [：space：]]\ngit dns //使用了别名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"对比文件超出-git目录仍开启diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对比文件超出-git目录仍开启diff"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 对比文件超出.git目录仍开启diff")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git diff --no-index\ngit dni //使用了别名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"gitignore配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore配置"}},[s._v("#")]),s._v(" gitignore配置")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# java\n/.classpath\n/.project\n/.settings/\n/target/\n.DS_Store\n.svn\n\n# local env files\n.env.local\n.env.*.local\n\n# Log files\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Editor directories and files\n.idea\n.vscode\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n/wx_maven_project.iml\n/.idea/\n\n# node\nnode_modules\n/dist\npublic\nserver-build\nproxy/*\n\n# docker\nbuild-image/dist\nbuild-image/proxy\nbuild-image/build.tar.gz\n\n# mock\n.amock\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br")])]),a("h2",{attrs:{id:"使-gitignore生效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使-gitignore生效"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v("  使.gitignore生效")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git rm --cached logs/xx.log\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"gitignore规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore规则"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" .gitignore规则")]),s._v(" "),a("ol",[a("li",[s._v("忽略文件中的空行或以井号（#）开始的行将会被忽略。")]),s._v(" "),a("li",[s._v("可以使用Linux通配符。如（*）代表任意多个字符。")]),s._v(" "),a("li",[s._v("如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此路径下，（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1, string2, ... }）代表可选的字符串等。")]),s._v(" "),a("li",[s._v("如果名称的最前面有一个感叹号（!），表示例外规则。")]),s._v(" "),a("li",[s._v("如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。")])]),s._v(" "),a("h2",{attrs:{id:"查看当前忽略文件命中哪条规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看当前忽略文件命中哪条规则"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v("  查看当前忽略文件命中哪条规则")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git-check-ignore  -v, --verbose 还输出有关每个给定路径名的匹配模式\ngit ig filename//使用了别名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"git-remote相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-remote相关"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git remote相关")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git remote -v //显示当前仓库的仓库地址引用\ngit remote show origin //显示本地和远程分支的对应情况\ngit remote add origin xxx //添加推送/拉取源\ngit remote remove origin //移除推送/拉取源\ngit remote rename origin xxx //重命名本地推送/拉取源名称\ngit remote update [--prune | -p] //远程删除分支后，同步本地分支和远程分支\ngit remote prune origin //与上一条等同\ngit ls-remote//列出远程分支所有引用，包括master,dev，head,pr等等\ngit push bak //推送多源\n//当远程没有本地的分支push时，需要设置上游追踪才可推送，出现情况为一个未有/悬空状态\ngit push --set-upstream origin feature-zjh-fixbug-dev-2019-11-11\ngit push -u origin feature-zjh-fixbug-dev-2019-11-11//与上一条等同\n或者通过远程创建分支后本地分支设置关联\ngit branch --set-upstream-to=origin/dev dev//本地dev追踪关联远程dev\n之后可以push\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"git-config相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-config相关"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v("  git config相关")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git config --global --list\ngit config --edit\ngit config --global --edit\ngit config  user.name 查看\ngit config  --global  user.name 'xccjh' 设置\ngit config  --global  user.email  'xccjh@gmail.com'\ngit config  --list --system\ngit config  --list --local\ngit config --list --global\n\n\n常见的git文件\n~/.gitconfig\n.git/config\n.git/head\n.git/FETCH_HEAD\ngit fetch origin master\ngit log -p FETCH_HEAD\ngit merge FETCH_HEAD\n.git/refs/heads/master\n.submodule\n.gitignore\n.gitkeep\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h2",{attrs:{id:"git-rev-parse和git-rev-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rev-parse和git-rev-list"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git rev-parse和git rev-list")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("获取分支的某个commitid\ngit rev-parse master\ngit rev-parse master~1\n\n获取分支节点commitid\ngit rev-list master\ngit rev-list master --count\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"操作符相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作符相关"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 操作符相关")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("- 连字符\n-- 区分文件或文件\n^^ 上一个\n~1 上一个\nbranch^{commit}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"git常见符号含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git常见符号含义"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git常见符号含义")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("?? = 未跟踪\nM = modified\nA = added\nD = deleted\nR = renamed\nC = copied\nU = updated but unmerged\n! = ignore\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"与-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与-区别"}},[s._v("#")]),s._v(" .. 与... 区别")]),s._v(" "),a("blockquote",[a("p",[s._v("如果是在git log命令中")])]),s._v(" "),a("ol",[a("li",[a("code",[s._v("..")]),s._v("相关"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git log --pretty=oneline G.. F\ngit log --pretty=oneline ^G F\ngit log --pretty=oneline F --not G\n//显示F拥有的、而G没有的所有提交，以上等效\n\n    D---E-------F\n  /\nB---C---G---H---I---J\n/\nA-------K---------------L--M\n// git log F.. J 将显示C, G, H, I, J\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),s._v(" "),a("li",[a("code",[s._v("...")]),s._v("相关"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//表示可以到r1或者r1，但是不能同时达到两者的提交，“r1... r2" 与 “r2... r1"表示的是一样的\n    D---E-------F\n  /\nB---C---G---H---I---J\n/\nA-------K---------------L--M\n//上图的git提交历史：\n//git log F... J 将显示D, E, F, C, G, H, I, J\n//git log F... M 将显示B, D, E, F, K, L, M\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("如果是在git diff命令中")])]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("r1..r2")]),s._v('表示r1到r2之间的区别，同"r1 r2"一样')])]),s._v(" "),a("li",[a("p",[a("code",[s._v("r1...r2")]),s._v("表示从r1和r2公共祖先到r2的区别")])])]),s._v(" "),a("h2",{attrs:{id:"git-stash堆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash堆栈"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git stash堆栈")]),s._v(" "),a("h3",{attrs:{id:"stash当前修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stash当前修改"}},[s._v("#")]),s._v(" stash当前修改")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('$ git stash\n$ git stash -m"stash测试"     -m表示本次贮藏信息 （注意，-m与文本信息之间没有空格）\n// 使用如下命令保留暂存区不重置：\n$ git stash push -k  （-k是--keep-index简略形式，默认值是--no-keep-index。）\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"查看现有stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看现有stash"}},[s._v("#")]),s._v(" 查看现有stash")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git stash list\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"重新应用缓存的stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重新应用缓存的stash"}},[s._v("#")]),s._v(" 重新应用缓存的stash")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git stash  apply\n$ git stash pop\n$ git stash apply stash@{id}\n// 默认不重置暂存区，使用--index参数可以实现重置暂存区\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"移除stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除stash"}},[s._v("#")]),s._v(" 移除stash")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git stash clear\n$ git stash remove\n$ git stash drop stash@{1} # 删除指定储藏，其中stash@{1}也可直接写成1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"查看指定stash的diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看指定stash的diff"}},[s._v("#")]),s._v(" 查看指定stash的diff")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 可以使用git stash show命令，后面可以跟着stash名字\n$ git stash show/git stash show stash@{0}\n// 返回信息\n# index.html | 1 +\n# style.css | 3 +++\n# 2 files changed, 4 insertions(+)\n\n// 在该命令后面添加-p或--patch可以查看特定stash的全部diff\n$ git stash show -p\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"从stash创建分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从stash创建分支"}},[s._v("#")]),s._v(" 从stash创建分支")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// git stash branch，这会创建一个新的分支，检出你储藏工作时的所处的提交,丢弃储藏\n$ git stash branch testchanges\nSwitched to a new branch "testchanges"\n# On branch testchanges\n# Changes to be committed:\n#   (use "git reset HEAD <file>..." to unstage)\n#\n#      modified:   index.html\n#\n# Changes not staged for commit:\n#   (use "git add <file>..." to update what will be committed)\n#\n#      modified:   lib/simplegit.rb\n#\nDropped refs/stash@{0} (f0dfc4d5dc332d1cee34a634182e168c4efc3359)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"暂存未跟踪或忽略的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂存未跟踪或忽略的文件"}},[s._v("#")]),s._v(" 暂存未跟踪或忽略的文件")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("默认情况下，git stash会缓存下列文件")])]),s._v(" "),a("ul",[a("li",[s._v("添加到暂存区的修改（staged changes）")]),s._v(" "),a("li",[s._v("Git跟踪的但并未添加到暂存区的修改（unstaged changes）")])]),s._v(" "),a("blockquote",[a("p",[s._v("默认情况下，git stash不会缓存下列文件")])]),s._v(" "),a("ul",[a("li",[s._v("在工作目录中新的文件（untracked files）")]),s._v(" "),a("li",[s._v("被忽略的文件（ignored files）")])]),s._v(" "),a("blockquote",[a("p",[s._v("git stash命令提供了参数用于缓存上面两种类型的文件。")])]),s._v(" "),a("ul",[a("li",[s._v("使用-u或者--include-untracked可以stash untracked文件。")]),s._v(" "),a("li",[s._v("使用-a或者--all命令可以stash当前目录下的所有修改")])]),s._v(" "),a("h2",{attrs:{id:"git-stash-drop后怎么找回？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-drop后怎么找回？"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git Stash Drop后怎么找回？")]),s._v(" "),a("p",[s._v("一般"),a("code",[s._v("git stash pop")]),s._v("如果有冲突就不会把 "),a("code",[s._v("stash@{0}: WIP on master: 96512bb asdf")]),s._v(" 堆栈删除这是git的安全保护机制，但是如果你手动执行 "),a("code",[s._v("git stash drop")]),s._v(" 或 "),a("code",[s._v("git stash clear")]),s._v(" 就没办法了，比如手速快了 "),a("code",[s._v("status")]),s._v(" 敲成 "),a("code",[s._v("stash")]),s._v("然后 "),a("code",[s._v("git status drop")]),s._v(" 变成 "),a("code",[s._v("git stash drop")]),s._v(" 之类，如何找回呢？")]),s._v(" "),a("h3",{attrs:{id:"说在前面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说在前面"}},[s._v("#")]),s._v(" 说在前面")]),s._v(" "),a("hr"),s._v(" "),a("ol",[a("li",[a("p",[s._v("只有git stash clear不会提示stash@{0}的commitID，而且执行stash存储提示信息在哪个分支+分支当前commitId+分支当前commit信息，没有stash的commitId信息，可以使用git rev-parse stash{0}查看commitId。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-04-10_17-39-18.png",alt:"'git stash'",title:"git stash"}})]),s._v(" "),a("center",[s._v("git stash")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-04-10_17-40-20.png",alt:"'git stash clear'",title:"git stash clear"}})]),s._v(" "),a("center",[s._v("git stash clear")])],1)]),s._v(" "),a("li",[a("p",[a("code",[s._v(".git")]),s._v("有"),a("code",[s._v("logs/，lost-found/")]),s._v("，两个目录，"),a("code",[s._v("git fsck --lost-found")]),s._v("其实是查看"),a("code",[s._v(".git/logs/lost-found/")]),s._v("下的多个commit文件，注意没有按照时间排序。"),a("code",[s._v("git rev-parse")]),s._v("可以随时获取"),a("code",[s._v("branch,head,tag")]),s._v("等的commitId。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-04-10_17-41-43.png",alt:"'git rev-parse'",title:"git rev-parse"}})]),s._v(" "),a("center",[s._v("git rev-parse")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-04-10_17-38-13.png",alt:"'git stash drop'",title:"git stash pop"}})]),s._v(" "),a("center",[s._v("git stash pop/drop")])],1)])]),s._v(" "),a("h3",{attrs:{id:"开始找回"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始找回"}},[s._v("#")]),s._v(" 开始找回")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[s._v("首先查看自己最近的一些删除的提交")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("git fsck "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("lost"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("found\nChecking object directories"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" done"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\ndangling commit c9302548c3da8abbf509da3c1dafb4d56b1d065e\ndangling blob "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("53")]),s._v("b3cfd5fdaffa0bb051ebfb9d2029d6cd175b2b\ndangling blob bc93311fc4792497ff754317a33060d7a5f076b0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("找到上述你刚才"),a("code",[s._v("git stash drop stash@{0}")]),s._v("时成功删除的id。例如：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Dropped refs/stash@{0} (e2c07caec2b995ba75ce1abd15796c6f1686d532)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("拷贝"),a("code",[s._v("e2c07caec2b995ba75ce1abd15796c6f1686d532")]),s._v("查找"),a("code",[s._v("git fsck --lost-found | grep e2c07caec")]),s._v("列出的删除的提交id，")]),s._v(" "),a("li",[s._v("如果找不到"),a("code",[s._v("stash@{0}commitId")]),s._v(",可以根据时间来辅助查找")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-04-10_17-20-29.png",alt:"根据时间找出删除的stash",title:"根据时间找出删除的stash"}})]),s._v(" "),a("ul",[a("li",[s._v("接着"),a("code",[s._v("git show e2c07caec2b995ba75ce1abd15796c6f1686d532")]),s._v("看一下是不是你丢弃的改动文件")])]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("$ git show f8527fa97e62c38a5becb07f2b80785d730b86da\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查看修改差异")]),s._v("\ncommit "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("061880")]),s._v("c8350397a14a4b202818aeb49607fea496\nMerge"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" f8527fa c67f8c9\nAuthor"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" zoujiahe "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("zoujiahe@pcitech"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\ndate"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" '  Fri Apr "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0800")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WIP")]),s._v(" on master"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" f8527fa "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WIP")]),s._v(" on master"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" c408e8a fas\ndiff "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("cc asdfas\nindex cdb0d0f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("cdb0d0f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("d4e7c0b\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("asdfas\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("asdfas\n@@@ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" @@@ asdff\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("sdfsd\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("sdfsd\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("a\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("sdasdasdasd\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("ul",[a("li",[s._v("最后"),a("code",[s._v("git merge e2c07caec2b995ba75ce1abd15796c6f1686d532")]),s._v("即可找回")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-04-10_17-45-39.png",alt:"'git merge'",title:"git merge"}})]),s._v(" "),a("h2",{attrs:{id:"wip-on-master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wip-on-master"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" WIP on master")]),s._v(" "),a("blockquote",[a("p",[s._v("git提示"),a("code",[s._v('WIP on master: Auto stash before merge of "master" and "origin/master"')]),s._v(",什么意思呢？")])]),s._v(" "),a("ul",[a("li",[s._v("这意味着，当您开始git pull时，您有一些未提交的修改。在这种情况下，git会在拉动之前将它们藏起来，然后再重新应用它们。如果此后没有出现其他消息：这通常意味着一切都很好。")]),s._v(" "),a("li",[s._v("这意味着您的本地更改将因您隐含的合并而受到损害，git pull并且它们会预先自动隐藏。如果您不想使用这种机制，请确保自己手动存储更改或在拉动之前提交更改。")]),s._v(" "),a("li",[s._v('Git中对于"git stash"中的“WIP”缩写的正确理解如下\n'),a("img",{attrs:{src:"/vuebloger/img/post/20190402104016581.png",alt:"WIP",title:"WIP"}})])]),s._v(" "),a("ol",[a("li",[s._v("WIP全称：Work in progress，正在工作过程中，引申含义为“目前工作区中的代码正在编写中，这部分代码不能独立运行，是半成品”。")]),s._v(" "),a("li",[s._v('WIP其实代表的就是WIP版本里面的代码是“正在工作并编写的代码”，意思便是"代码工作只开发了一半，不能独立的运行"。')]),s._v(" "),a("li",[s._v("直接把这种半成品代码提交commit是极其不合适的，但是我们可以把这部分代码git stash储藏起来，并用WIP给他们做标记。")])]),s._v(" "),a("h2",{attrs:{id:"github缩略语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github缩略语"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" github缩略语")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[s._v("缩写")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("含义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PR")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("Pull Request. 拉取请求，给其他项目提交代码")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("LGTM")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("Looks Good To Me. 朕知道了 代码已经过 review，可以合并")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("SGTM")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("Sounds Good To Me. 和上面那句意思差不多，也是已经通过了 review 的意思")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("WIP")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("Work In Progress传说中提 PR 的最佳实践是，如果你有个改动很大的 PR，可以在写了一部分的情况下先提交，但是在标题里写上 WIP，以告诉项目维护者这个功能还未完成，方便维护者提前 review 部分提交的代码。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PTAL")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("Please Take A Look. 你来瞅瞅？用来提示别人来看一下")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("TBR")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("To Be Reviewed. 提示维护者进行 review")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("TL , DR")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("Too Long; Didn't Read. 太长懒得看。也有很多文档在做简略描述之前会写这么一句")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("TBD")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("To Be Done(or Defined/Discussed/Decided/Determined)根据语境不同意义有所区别，但一般都是还没搞定的意思")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PRD")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("Product Requirement Document. 产品需求文档")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("TBH")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("to be honest 老实说")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("IMAO")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("laugh my ass off 笑到不行，超爆笑")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("BTW")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("by the way 顺带一提")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("TTYL")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("talk to you later 晚点聊")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("IDK")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("l don't know 我不知道")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("AKA")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("as known as 也就是，以...为人所知")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("plz")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("please 拜托")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("thx")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("thanks 谢谢")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("tmr")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("tomorrow 明天")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("ppl")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("people 人们，大家")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("IMHO")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("in my humble opinion 依我浅见")])])])]),s._v(" "),a("h2",{attrs:{id:"git-gc和fsck的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-gc和fsck的用法"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git gc和fsck的用法")]),s._v(" "),a("ul",[a("li",[s._v("用来"),a("code",[s._v("fill system check")]),s._v("文件系统检查，用来对本地和远程仓库的一致性检查，删除"),a("code",[s._v("dangling objects")]),s._v("悬空对象")]),s._v(" "),a("li",[s._v("在悬空对象列表中，使用"),a("code",[s._v("git show commitId")]),s._v("查看悬空记录的详情,"),a("code",[s._v("git merge commitId")]),s._v("即可恢复")])]),s._v(" "),a("blockquote",[a("p",[s._v("作用")])]),s._v(" "),a("ol",[a("li",[s._v("保证git良好的性能\n"),a("ul",[a("li",[s._v("在大的仓库中, git靠压缩历史信息来节约磁盘和内存空间.压缩操作并不是自动进行的, 你需要手动执行"),a("code",[s._v("git gc")])]),s._v(" "),a("li",[s._v("压缩操作比较耗时, 运行"),a("code",[s._v("git gc")]),s._v("命令好是在你没有其它工作的时候.")])])]),s._v(" "),a("li",[s._v("保持git的可靠性\n"),a("ul",[a("li",[a("code",[s._v("git fsck")]),s._v(" 运行一些仓库的一致性检查, 如果有任何问题就会报告.")]),s._v(" "),a("li",[s._v("这项操作也有点耗时, 通常报的警告就是悬空对象.")])])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[a("code",[s._v("dangling objects")]),s._v("悬空对象并不是问题, 最坏情况只是它们多占了一些磁盘空间，却是找回丢失的工作的最后一丝希望.")])]),s._v(" "),a("h2",{attrs:{id:"移除所有未跟踪文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除所有未跟踪文件"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 移除所有未跟踪文件")]),s._v(" "),a("blockquote",[a("p",[s._v("git clean [options] , 一般会加上参数-df，-d表示包含目录，-f表示强制清除。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git clean -n\n//是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒\ngit clean -f\n//删除当前目录下所有没有track过文件,不会删除.gitignore文件里面指定的文件夹/文件, 不管这些文件有没有被track过\ngit clean -df\n//删除当前目录下没有被track过文件和文件夹,注意包括文件夹\ngit clean -xf\n//删除当前目录下所有没有track过的文件. 不管他是否是.gitignore文件里面指定的文件夹和文件\ngit clean -f <path>\n//删除指定路径下的没有被track过的文件\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("code",[s._v("git reset --hard")]),s._v("和"),a("code",[s._v("git clean -df")]),s._v("是一对好基友,结合使用能让工作目录完全回退到最近一次commit的时候")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git reset --hard\ngit clean -df\n运行后, 工作目录和缓存区回到最近一次commit时候一摸一样的状态，git status会告诉你这是一个干净的工作目录！\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("git clean")]),s._v("对于刚编译过的项目也非常有用,能删除掉编译后生成的.o和.exe等文件。这个在打包要发布一个release很有用")]),s._v(" "),a("blockquote",[a("p",[s._v("移除文件")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git rm -f oldfile\ngit rm -cached oldfile\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"git-rm和mv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rm和mv"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git rm和mv")]),s._v(" "),a("ul",[a("li",[s._v("只从stage中删除，工作区则不做出改变，注意该操作移除了stage,该文件变成未add文件")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git rm --cached readme.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("不但从stage中删除，同时删除工作区文件")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git rm readme.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("把a.txt改名为b.txt")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git mv a.txt b.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("更改文件名")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git add newfile\ngit rm oldfile\ngit commit -m'rename file'\n或者\ngit mv oldfile newfile\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"git-branch-chechout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-branch-chechout"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git branch/chechout")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("创建分支： git branch mybranch\n切换分支： git checkout mybranch\n创建并切换分支： git checkout -b mybranch\n创建基于远程分支dev的本地分支mybranch： git checkout -b mybranch origin/dev\n基于远程dev/1.5.4分支创建本地分支名为/dev/1.5.4： git checkout -b dev/1.5.4 origin/dev/1.5.4\n\n更新master主线上的东西到当前分支上：git rebase master\n合并mybranch到当前分支:git merge mybranch\n\n删除分支： git branch -d mybranch\n强制删除分支： git branch -D mybranch\n删除远程分支，删除后还需推送到服务器: git branch -d -r <branchname>//只是清空了本地记录，作用和prune一样\n删除后推送至服务器: git push origin:<branchname>//git push origin 本地分支A:远程分支B，推送空即使是删除\n直接删除远程分支：git push origin --delete [branch-name]\n推送分支： git push origin mybranch//省略远程分支，即为推送到该本地分支mybranch记录的远程追踪分支，在.git/gitconfig可查看\n推送都省略: git push //默认为git push orign 当前分支:当前分支记录的远程追踪分支\n取远程分支合并到本地： git merge origin/mybranch\n\n查看哪些分支合并入当前分支： git branch –-merged\n查看哪些分支未合并入当前分支： git branch –-no-merged\n\n更新远程库到本地： git pull/fetch+merge/rebase //git pull <远程主机名> <远程分支名>:<本地分支名>\n\n列出所有本地分支:git branch\n列出所有远程分支:git branch -r\n列出所有本地分支和远程分支:git branch -a\n查看各个分支最后一次提交： git branch -v\n查看分支是否有新提交: git branch -av\n[gone]代表远程分支已删除\n[ahead 1, behind 2]ahead代表本地有提交，behind代表远程有提交\n\ngit checkout -- README README是想恢复的文件名，恢复成index区域里面的内容，为什么要加“--”呢，这个是为了告诉Git，这是一个文件而不是一个分支\nGit checkout . 从index区域恢复所有文件\ngit checkout master     //切换到master分支\ngit checkout tag_name    //分离头到tag_name 版本\ngit checkout  commit_id file_name  //把文件file_name分离头到commit_id版本\ngit chechout -b temp 415jhllkk(分支哈希)\ngit checkout -b dev //创建了一个名称为dev的分支并切换到dev分支上去\ngit checkout -b dev master //从master分支分化一个新分支名为dev，并切换到dev分支上去\n\ngit checkout - //切换到上一个切换的分支\ngit branch --set-upstream [branch] [remote-branch] //建立追踪关系（关联远程分支），在现有分支与指定的远程分支之间\ngit branch --set-upstream-to=origin/dev dev\ngit branch --track [branch] [remote-branch] //新建一个分支，与指定的远程分支建立追踪关系\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br")])]),a("h2",{attrs:{id:"从远程拉取所有分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从远程拉取所有分支"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 从远程拉取所有分支")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('git branch -r | grep -v \'\\->\' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"删除远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除远程分支"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 删除远程分支")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git branch -dr [remote/branch]//注意只是删了本地引用\ngit push [远程名] [本地分支]:[远程分支] , 如果省略 [本地分支]，即删除分支如git push origin :mybranch\ngit push origin --delete [branch-name]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"恢复删除远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#恢复删除远程分支"}},[s._v("#")]),s._v(" 恢复删除远程分支")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// reflog意思 reference log\n// 查看提交时间 git reflog --date=iso\n# 70cb580 HEAD@{2020-02-25 15:14:31 +0800}: checkout: moving from master to master\n// 不加--date=iso参数，则以标号显示，如下\n# 70cb580 HEAD@{0}: checkout: moving from master to master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ol",[a("li",[s._v("git reflog查看删除的远程分支操作的commit_id")]),s._v(" "),a("li",[s._v("git checkout -b recover_branch_name commit_id创建新分支方案一")]),s._v(" "),a("li",[s._v("git branch recover_branch_name HEAD@{number}创建新分支方案二")]),s._v(" "),a("li",[s._v("git push origin recover_branch_name提交到远程仓库")])]),s._v(" "),a("p",[s._v("以此类推")]),s._v(" "),a("h2",{attrs:{id:"git-alias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-alias"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git alias")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git config --global alias.ci commit   //别名 ci 是commit的别名\ngit config --unset alias.co //删除别名\ngit config --global --list// 查看别名和用户名\ngit config --global --edit// 打开编辑别名文件\ngit config [<file-option>] --unset-all name [value_regex]//依照正则删除配置\n\n\n// 以下为我的配置\n\n[user]\nuser.email=zoujiahe@pcitech.com\nuser.name=zoujiahe\n[alias]\nst = status\nbr = branch\npo = log --abbrev-commit --pretty=oneline\nno = log --name-only\nci = commit -m\nco = checkout\nsw = switch\nr = restore\nrs = restore --staged\nca = commit -am\na = add .\nrh = reset --hard\nrd = reset\ndh = diff head\nd = diff\ndc = diff --cached\ncg = commit --amend\nrc = reset --soft head~1\nrb = rebase\nlogp = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\nlogt = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative\nlm = log --no-merges --color --date=format:'%Y-%m-%d %H:%M:%S' --author='MrZou' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\nlms = log --no-merges --color --stat --date=format:'%Y-%m-%d %H:%M:%S' --author='MrZou' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\nlss = log --no-merges --color --stat --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\nls = log --no-merges --color --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\nd1 = diff head~1 --name-only\nd2 = diff head~2 --name-only\nd3 = diff head~3 --name-only\nd5 = diff head~5 --name-only\nd10 = diff head~10 --name-only\ngtz = archive --format=tar.gz\ngt = archive --format=tar\nig = check-ignore -v\nrp = rev-parse\nrpt = rev-parse --show-toplevel\nrpr = rev-parse --show-prefix\nrpd = rev-parse --show-cdup\nrph = rev-parse HEAD\nrpg = rev-parse --git-dir\nrl = rev-list\np = --exec-path\nsl = stash list\ns = stash save\nsp = stash pop\nsa = stash apply\nsd = stash drop\nsc = stash clear\nc = config --global --list\nce = config --global --edit\ncl = config --edit\nlpf = log -p FETCH_HEAD\ncindex = checkout-index --prefix=git-export-dir/\nmf = merge FETCH_HEAD\no = --output\ndni = diff --no-index\ndns = diff --word-diff-regex = [^ [：space：]]\nlb = !\"for k in `git branch|perl -pe s/^..//`;do echo `git show --pretty=format:\\\"%Cgreen%ci %Cblue%cr%Creset\\\" $k|head -n 1`\\\\\\t$k;done|sort\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br")])]),a("h2",{attrs:{id:"更换git邮箱地址脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更换git邮箱地址脚本"}},[s._v("#")]),s._v(" 更换git邮箱地址脚本")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" filter-branch --env-filter "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'\n\nOLD_EMAIL="zoujiahe@pcitech.com"\nCORRECT_NAME="Mrzou"\nCORRECT_EMAIL="zjh2725353471@gmail.com"\n\nif [ "'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GIT_COMMITTER_EMAIL")]),s._v('" = "'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$OLD_EMAIL")]),s._v('" ]\nthen\n    export GIT_COMMITTER_NAME="'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CORRECT_NAME")]),s._v('"\n    export GIT_COMMITTER_EMAIL="'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CORRECT_EMAIL")]),s._v('"\nfi\nif [ "'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GIT_AUTHOR_EMAIL")]),s._v('" = "'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$OLD_EMAIL")]),s._v('" ]\nthen\n    export GIT_AUTHOR_NAME="'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CORRECT_NAME")]),s._v('"\n    export GIT_AUTHOR_EMAIL="'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CORRECT_EMAIL")]),s._v("\"\nfi\n'")]),s._v(" --tag-name-filter "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" -- --branches --tags:wq\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"git-commit仓库版本区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit仓库版本区"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git commit仓库版本区")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 提交工作区自上次commit之后的变化，直接到仓库区，跳过了add,对新文件无效\ngit commit -am\n// 提交时显示所有diff信息\ngit commit -v\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"加入signed-off-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加入signed-off-by"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 加入signed-off-by")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('git commit -s -m "message"     #用于显示signed-off-by\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"git-add暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-add暂存区"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git add暂存区")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git add readme\ngit add -u\ngit add .\ngit add *\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"git-revert和reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert和reset"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git revert和reset")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//撤销上一次的提交，要通过git log查看提交日志，也可直接指定提交编号或序号\ngit reset --hard HEAD~1（HEAD^=HEAD~1，HEAD^^=HEAD~2）\ngit revert <commit-id> //区别是需要在commit一次\n// 本来目的是抽离某次提交的更改,又想恢复被撤销的提交\n// 可用"git reflog"查看仓库中所有的分支的所有更新记录，包括已经撤销的更新,如:\ngit reset --hard HEAD@{7}\ngit reset --hard e0e79d7\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"关于-git下的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-git下的文件"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 关于.git下的文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("COMMIT_EDITMSG\nHEAD//当前所在分支commit\nbranchs\nORIG_HEAD\nrefs// 分支在heads下\ndescription\ngitk.cache\nhooks\nindex\ninfo\nlogs\nobjects\nconfig//本地配置在这\n\n\ngit cat-file -t jhkjh(哈希) commit类型\ngit cat-file -p hnjnlkjn(哈希) 具体信息\n\n//git文件类型\nblob\ntree\ncommit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h2",{attrs:{id:"git-rebase用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase用法"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git rebase用法")]),s._v(" "),a("blockquote",[a("p",[s._v("git log问题")])]),s._v(" "),a("p",[s._v("充斥着大量如下commit:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("fixbug\nfixbug\nfixbug\nadd log\nadd log\nadd log\nadd log\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ol",[a("li",[s._v("不利于代码 review")]),s._v(" "),a("li",[s._v("不利于代码回滚")]),s._v(" "),a("li",[s._v("不利于自己回顾跟踪代码。")])]),s._v(" "),a("h3",{attrs:{id:"多个commit合并为一个"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个commit合并为一个"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 多个commit合并为一个")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("rebase使用一：多个commit合并为一个")])]),s._v(" "),a("ol",[a("li",[s._v("合并最近的 4 次提交纪录")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git rebase -i  [startpoint]  [endpoint]\ngit rebase -i HEAD~4\n如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向的commit(注：该区间指定的是一个前开后闭的区间)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("其中-i的意思是--interactive，这时候，会自动进入 vi 编辑模式：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('s cacc52da add: qrcode\ns f072ef48 update: indexeddb hack\ns 4e84901a feat: add indexedDB floder\ns 8f33126c feat: add test2.js\n# Rebase 5f2452b2..8f33126c onto 5f2452b2 (4 commands)\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like "squash", but discard this commit\'s log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n# These lines can be re-ordered; they are executed from top to bottom.\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n上面是指令编辑，下面注释是指令说明，解释如下\npick：保留该commit（缩写:p）\nreword：保留该commit，但我需要修改该commit的注释（缩写:r）\nedit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）\nsquash：将该commit和前一个commit合并（缩写:s）\nfixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）\nexec：执行shell命令（缩写:x）\ndrop：我要丢弃该commit（缩写:d）\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("按照如上命令来修改你的提交纪录：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("s cacc52da add: qrcode\ns f072ef48 update: indexeddb hack\ns 4e84901a feat: add indexedDB floder\np 8f33126c feat: add test2.js\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("如果保存的时候，你碰到了这个错误"),a("code",[s._v("error: cannot 'squash' without a previous commit")]),s._v(",原因是合并到了已经提交远程分支的纪录，合并过度了")]),s._v(" "),a("li",[s._v("如果你异常退出了 vi 窗口,执行"),a("code",[s._v("git rebase --edit-todo")]),s._v(",这时候会一直处在这个编辑的模式里，我们可以回去继续编辑，修改完保存后执行"),a("code",[s._v("git rebase --continue")]),s._v("即可")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git rebase -i a2a438f2652 4d3b38f3e//合并两个提交之间的commit记录\ngit rebase -i --root//准备修改第一次提交历史，列出所有提交\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[a("code",[s._v("git merge")]),s._v("问题")])]),s._v(" "),a("p",[a("code",[s._v("git merge")]),s._v("后"),a("code",[s._v("git log")]),s._v("记录里发现一些 merge 的信息,这样污染了 commit 记录,而且记录分叉了")]),s._v(" "),a("p",[a("code",[s._v("git merge")]),s._v("会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方merge，merge的结果是生成一个新的快照（并提交）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git checkout feature\ngit merge master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("Merge 好在它是一个安全的操作。现有的分支不会被更改，每次合并上游更改时 feature 分支都会引入一个外来的合并提交。如果上游分支 非常活跃的话，这或多或少会污染你的分支历史")]),s._v(" "),a("h3",{attrs:{id:"rewinding，倒带重播"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rewinding，倒带重播"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" rewinding，倒带重播")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("rebase使用二：分支合并（原理rewinding，倒带重播）")])]),s._v(" "),a("p",[a("code",[s._v("git rebase")]),s._v("的分支的历史记录尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git checkout feature\ngit rebase master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("它会把整个 feature 分支移动到 master 分支的后面，有效地把所有 master 分支上新的提交并入过来。但是，rebase 为原分支上每一个提交创建一个新的提交，重写了项目历史，并且不会带来合并提交。")]),s._v(" "),a("p",[a("code",[s._v("git rebase")]),s._v(" 做了什么操作呢？(feature1 - master)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("- 首先，git 会把 feature1 分支里面的每个 commit 取消掉；\n- 其次，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下\n- 然后，把 feature1 分支更新到最新的 master 分支；\n- 最后，把上面保存的 patch 文件应用到 feature1 分支上；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",[a("li",[s._v("在rebase的过程中，也许会出现冲突"),a("code",[s._v("conflict")]),s._v("。在这种情况，git会停止rebase并会让你去解决冲突。在解决完冲突后，用"),a("code",[s._v("git add")]),s._v("命令去更新这些内容,无需执行 git-commit，只要执行"),a("code",[s._v("git rebase --continue")])]),s._v(" "),a("li",[s._v("在任何时候，我们都可以用"),a("code",[s._v("git rebase —abort")]),s._v("来终止 rebase 的行动，并且分支会回到 rebase 开始前的状态。")]),s._v(" "),a("li",[s._v("rebase确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码rebase到"),a("code",[s._v("origin/master")]),s._v("上，然后再向主项目提交修改。这样的话，该项目的维护者就不再需要进行整合工作，只需要快进merge便可。")])]),s._v(" "),a("h3",{attrs:{id:"选定重放分支差异到指定分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选定重放分支差异到指定分支"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 选定重放分支差异到指定分支")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("rebase使用三:重放多分支中一个分支与另一个分支的差异提交到主分支")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git rebase   [startpoint]   [endpoint]  --onto  [branchName]\n[startpoint] [endpoint]指定了一个编辑区间(前开后闭)，--onto的意思是要将该指定的提交复制到哪个分支上\n为了让这个区间包含开区间提交，可以使用^将区间起始点向后退一步\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("重放server和client分支之间的差异C8/C9提交到master，执行"),a("code",[s._v("git rebase --onto master server client")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/interesting-rebase-1.png",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("重放server和client分支之间的差异C8/C9提交到master")]),s._v("\n以上命令的意思是：“取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，然后把它们在 master 分支上重放一遍”。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/interesting-rebase-2.png",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("重放后的效果")]),s._v("\n现在可以快进merge master 分支了,执行"),a("code",[s._v("git checkout master&&git merge client")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/interesting-rebase-3.png",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("merge快进效果")])],1),s._v(" "),a("h3",{attrs:{id:"将一段commit粘贴到其他分支上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将一段commit粘贴到其他分支上"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 将一段commit粘贴到其他分支上")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("rebase使用四：将某一段commit粘贴到另一个分支上")])]),s._v(" "),a("p",[s._v("当我们项目中存在多个分支，有时候我们需要将某一个分支中的一段提交同时应用到其他分支中，就像下图：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2147642-0de010746cb78401.webp",alt:"'git stash'",title:"git rebase"}})]),s._v("\n我们希望将develop分支中的C~E部分复制到master分支中，这时我们就可以通过rebase命令来实现（如果只是复制某一两个提交到其他分支，建议使用更简单的命令:git cherry-pick）")],1),s._v(" "),a("p",[s._v("例如：创建master和develop两个分支\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2147642-c41f60d26b00cdfc.webp",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("master分支")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2147642-8519a024c88129c5.webp",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("develop分支")]),s._v("\n运行命令"),a("code",[s._v("git rebase 90bc0045b^ 5de0da9f2 --onto master")]),s._v(",查看当前分支的日志\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2147642-de397671caac1966.webp",alt:"'git stash'",title:"git rebase"}})]),s._v("\n可以看到，C~E部分的提交内容已经复制到了G的后面了，我们看一下当前分支的状态:\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2147642-cfd21fdb1e4038bc.webp",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("分离头状态")]),s._v("\n当前HEAD处于游离状态，实际上，此时所有分支的状态应该是这样:\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2147642-a3bbfea6d760f64a.webp",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("当前所有分支的状态")]),s._v("\n所以，虽然此时HEAD所指向的内容正是我们所需要的，但是master分支是没有任何变化的，git只是将C~E部分的提交内容复制一份粘贴到了master所指向的提交后面，我们需要做的就是将master所指向的提交id设置为当前HEAD所指向的提交id就可以了，即:"),a("code",[s._v("git checkout master&&git reset --hard 0c72e64")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2147642-003361cb0305c094.webp",alt:"'git stash'",title:"git rebase"}})]),s._v(" "),a("center",[s._v("处理分离头状态")])],1),s._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[s._v("rebase的风险")]),s._v(" "),a("p",[s._v("Do not rebase commits that exist outside your repository.")]),s._v(" "),a("p",[s._v("如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。")]),s._v(" "),a("p",[s._v("个人觉得只用不--force提交就没问题，简言之push远程后不要rebase后再强制push")])]),s._v(" "),a("h2",{attrs:{id:"git-status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git status")]),s._v(" "),a("ul",[a("li",[s._v("git status 命令后面加上 --ignored选项，还会列出被忽略的文件")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("$ git status "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("ignored\nOn branch master\nChanges to be committed"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v(" ")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git reset HEAD <file>..."')]),s._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" commit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v(" ")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add <file>..."')]),s._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v(" ")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git checkout -- <file>..."')]),s._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" working\n directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nUntracked files"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v(" ")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add <file>..."')]),s._v(" to include "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nIgnored files"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v(" ")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add -f <file>..."')]),s._v(" to include "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"git-log的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-log的命令"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git log的命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('--author 仅显示指定作者相关的提交\n--committer 仅显示指定提交者相关的提交\n--reverse 按时间倒序显示\n--p 按补丁格式显示每个更新之间的差异\n--stat 显示每次更新的文件修改统计信息\n-since, --after 仅显示指定时间之后的提交\n--until, --before 仅显示指定时间之前的提交\n\n\n--pretty=format 表示格式化输出，\n%h 表示提交对象的简短哈希字串，\n%s 表示提交说明\n之后如果需要查看log信息，git last 或者 git last -n 即可\n\n\n\ngit config --global alias.last "log --pretty=format:"%h,%s""\n\ngit log -p 4fcc51bc..4257ff777 \'./package.json\'\ngit status\ngit log\ngit log --oneline\ngit log -n4\ngit log -3\ngit log --graph命令可以看到分支合并图。\n\n// 显示commit历史，以及每次commit发生变更的文件\ngit log --stat\n// 搜索提交历史，根据关键词\ngit log -S [keyword]\n// 交数统计\ngit log --oneline | wc -l\n// 显示某个文件的版本历史，包括文件改名\ngit log --follow [file]\ngit whatchanged [file]\n// 显示指定文件相关的每一次diff\ngit log -p [file]\n// 显示某个commit之后的所有变动，每个commit占据一行\ngit log [tag] HEAD --pretty=format:%s\n// 显示所有提交过的用户，按提交次数排序\ngit shortlog -sn\n// 显示指定文件是什么人在什么时间修改过\ngit blame [file]\n// 显示两次提交之间的差异\ngit diff [first-branch]...[second-branch]\n// 显示今天你写了多少行代码\ngit diff --shortstat "@{0 day ago}\n// 显示某次提交时，某个文件的内容\ngit show [commit]:[filename]\n// 显示某次提交发生变化的文件\ngit show --name-only [commit]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br")])]),a("h2",{attrs:{id:"查找代码提交者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找代码提交者"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 查找代码提交者")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("方式一")]),s._v(" "),a("p",[s._v("git blame 查看本行代码最后提交信息")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git blame -L 14,+2 '.\\package.json'\ngit blame -L 198,+10 './file/index.html'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("方式二")]),s._v(" "),a("p",[s._v("根据关键字查询是谁提交的代码")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git log -pS  'APP上报'  'page/grid-event/caseList.html'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("警告")]),s._v(" "),a("p",[s._v("团队项目注意不要强制提交")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git push origin master -f (force)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"关于git-send-mail"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于git-send-mail"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 关于"),a("code",[s._v("git send-mail")])]),s._v(" "),a("h3",{attrs:{id:"什么是pop3、smtp和imap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是pop3、smtp和imap"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 什么是POP3、SMTP和IMAP?")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("POP3")])]),s._v(" "),a("p",[s._v("POP3是Post Office Protocol 3的简称，即邮局协议的第3个版本,它规定怎样将个人计算机连接到Internet的邮件服务器和下载电子邮件的电子协议。它是因特网电子邮件的第一个离线协议标准,POP3允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上,同时删除保存在邮件服务器上的邮件，而POP3服务器则是遵循POP3协议的接收邮件服务器，用来接收电子邮件的。(与IMAP有什么区别？)")]),s._v(" "),a("blockquote",[a("p",[s._v("SMTP")])]),s._v(" "),a("p",[s._v("SMTP 的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议。它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转方式。SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。SMTP 服务器就是遵循 SMTP 协议的发送邮件服务器。")]),s._v(" "),a("p",[s._v("SMTP 认证，简单地说就是要求必须在提供了账户名和密码之后才可以登录 SMTP 服务器，这就使得那些垃圾邮件的散播者无可乘之机。增加SMTP 认证的目的是为了使用户避免受到垃圾邮件的侵扰。")]),s._v(" "),a("blockquote",[a("p",[s._v("IMAP")])]),s._v(" "),a("p",[s._v("IMAP全称是Internet Mail Access Protocol，即交互式邮件存取协议，它是跟POP3类似邮件访问标准协议之一。不同的是，开启了IMAP后，您在电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。所以无论从浏览器登录邮箱或者客户端软件登录邮箱，看到的邮件以及状态都是一致的。（与POP3有什么区别？）")]),s._v(" "),a("blockquote",[a("p",[s._v("网易163免费邮箱")])]),s._v(" "),a("p",[s._v("网易163免费邮箱相关服务器信息,网易邮箱已经默认开启 POP3/SMTP/IMAP 服务\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/201102010936447869c.png",alt:"''"}})])],1),s._v(" "),a("h3",{attrs:{id:"imap和pop3有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imap和pop3有什么区别"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" IMAP和POP3有什么区别")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("POP3协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作（如移动邮件、标记已读等），不会反馈到服务器上，比如通过客户端收取了邮箱中的3封邮件并移动到其他文件夹，邮箱服务器上的这些邮件是没有同时被移动的 。")]),s._v(" "),a("p",[s._v("而IMAP提供webmail 与电子邮件客户端之间的双向通信，客户端的操作都会反馈到服务器上，对邮件进行的操作，服务器上的邮件也会做相应的动作。")]),s._v(" "),a("p",[s._v("同时，IMAP像POP3那样提供了方便的邮件下载服务，让用户能进行离线阅读。IMAP提供的摘要浏览功能可以让你在阅读完所有的邮件到达时间、主题、发件人、大小等信息后才作出是否下载的决定。此外，IMAP 更好地支持了从多个不同设备中随时访问新邮件。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/2011011118014265ebf.gif",alt:"'git stash'",title:"git stash"}})]),s._v("\n总之，IMAP 整体上为用户带来更为便捷和可靠的体验。POP3 更易丢失邮件或多次下载相同的邮件，但 IMAP 通过邮件客户端与webmail 之间的双向同步功能很好地避免了这些问题。若在web邮箱中设置了“保存到已发送”，使用客户端POP服务发信时，已发邮件也会自动同步到网页端“已发送”文件夹内。")],1),s._v(" "),a("h3",{attrs:{id:"postfix-sendmail"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postfix-sendmail"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" Postfix/Sendmail")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("Linux邮件服务器通常使用Sendmail。Postfix是用来替代Sendmail的，它的配置文件比Sendmail简单得多，配置相当容易。Internet的邮件系统是通过几个复杂的部分连接而成的，对于最终用户而言，我们熟悉的Outlook，Foxmail等都是用来收信和发信的，称之为MUA：Mail User Agent，邮件用户代理。MUA并非直接将邮件发送至收件人手中，而是通过MTA：Mail Transfer Agent，邮件传输代理代为传递，Sendmail和Postfix就是扮演MTA的角色。一封邮件从MUA发出后，可能通过一个或多个MTA传递，最终到达MDA：Mail Delivery Agent，邮件投递代理，邮件到达MDA后，就存放在某个文件或特殊的数据库里，我们将这个长期保存邮件的地方称之为邮箱。一旦邮件到达邮箱，就原地不动了，等用户再通过MUA将其取走，就是用Outlook，Foxmail等软件收信的过程。")]),s._v(" "),a("p",[s._v("所以一封邮件的流程是：")]),s._v(" "),a("p",[s._v("发件人：MUA --发送--\x3e MTA -> 若干个MTA... -> MTA -> MDA <--收取-- MUA：收件人")]),s._v(" "),a("p",[s._v("MUA到MTA，以及MTA到MTA之间使用的协议就是SMTP协议，而收邮件时，MUA到MDA之间使用的协议最常用的是POP3或IMAP。")]),s._v(" "),a("p",[s._v("需要注意的是，专业邮件服务商都有大量的机器来为用户服务，所以通常MTA和MDA并不是同一台服务器，因此，在Outlook等软件里，我们需要分别填写SMTP发送服务器的地址和POP3接收服务器的地址。")]),s._v(" "),a("h3",{attrs:{id:"git-send-mail-imap-send"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-send-mail-imap-send"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git send-mail/imap-send")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("许多项目建立了接受补丁的流程，大型的项目会通过一个开发者的邮件列表接受补丁。使用 git format-patch 来生成可以邮寄到列表的 mbox 格式的文件——它将每一个提交转换为一封电子邮件，提交信息的第一行作为主题，剩余信息与提交引入的补丁作为正文。 它有一个好处是使用 format-patch 生成的一封电子邮件应用的提交正确地保留了所有的提交信息。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git format-patch -M origin/master\n0001-add-limit-to-log-function.patch\n0002-changed-log-output-to-30-from-25.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("format-patch")]),s._v("命令打印出它创建的补丁文件名字。 -M 开关告诉 Git 查找重命名。 文件最后看起来像这样：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cat 0001-add-limit-to-log-function.patch\nFrom 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001\nFrom: Jessica Smith <jessica@example.com>\nDate: Sun, 6 Apr 2008 10:17:23 -0700\nSubject: [PATCH 1/2] add limit to log function\n\nLimit log functionality to the first 20\n\n---\n lib/simplegit.rb |    2 +-\n 1 files changed, 1 insertions(+), 1 deletions(-)\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex 76f47bc..f9815f1 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -14,7 +14,7 @@ class SimpleGit\n   end\n\n   def log(treeish = 'master')\n-    command(\"git log #{treeish}\")\n+    command(\"git log -n 20 #{treeish}\")\n   end\n\n   def ls_tree(treeish = 'master')\n--\n2.1.0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("可以编辑这些补丁文件为邮件列表添加更多不想要在提交信息中显示出来的信息。 如果在 --- 行与补丁开头（diff --git 行）之间添加文本，那么开发者就可以阅读它，但是应用补丁时会忽略它")]),s._v(" "),a("p",[s._v("为了将其邮寄到邮件列表，你既可以将文件粘贴进电子邮件客户端，也可以通过命令行程序发送它。粘贴文本经常会发生格式化问题，特别是那些不会合适地保留换行符与其他空白的 “更聪明的” 客户端。 幸运的是，Git 提供了一个工具帮助你通过 IMAP 发送正确格式化的补丁")]),s._v(" "),a("p",[s._v("首先，需要在 ~/.gitconfig 文件中设置 imap 区块。 可以通过一系列的 git config 命令来分别设置每一个值，或者手动添加它们，不管怎样最后配置文件应该看起来像这样")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('[imap]\n  folder = "[Gmail]/Drafts"\n  host = imaps://imap.gmail.com\n  user = user@gmail.com\n  pass = YX]8g76G_2^sFbd\n  port = 993\n  sslverify = false\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如果 IMAP 服务器不使用 SSL，最后两行可能没有必要，host 的值会是 imap:// 而不是 imaps://。 当那些设置完成后，可以使用 git imap-send 将补丁序列放在特定 IMAP 服务器的 Drafts 文件夹中")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cat *.patch |git imap-send\nResolving imap.gmail.com... ok\nConnecting to [74.125.142.109]:993... ok\nLogging in...\nsending 2 messages\n100% (2/2) done\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("此时，你可以到 Drafts 文件夹中，修改收件人字段为想要发送补丁的邮件列表， 可能需要抄送给维护者或负责那个部分的人，然后发送。")]),s._v(" "),a("p",[s._v("你也可以通过一个 SMTP 服务器发送补丁。 同之前一样，你可以通过一系列的 git config 命令来分别设置选项， 或者你可以手动地将它们添加到你的 ~/.gitconfig 文件的 sendmail 区块：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[sendemail]\n  smtpencryption = tls\n  smtpserver = smtp.gmail.com\n  smtpuser = user@gmail.com\n  smtpserverport = 587\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("当这完成后，你可以使用"),a("code",[s._v("git send-email")]),s._v("发送你的补丁：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git send-email *.patch\n0001-added-limit-to-log-function.patch\n0002-changed-log-output-to-30-from-25.patch\nWho should the emails appear to be from? [Jessica Smith <jessica@example.com>]\nEmails will be sent from: Jessica Smith <jessica@example.com>\nWho should the emails be sent to? jessica@example.com\nMessage-ID to be used as In-Reply-To for the first email? y\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("最后，对于正在发送的每一个补丁，Git 会吐出这样的一串日志信息：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(mbox) Adding cc: Jessica Smith <jessica@example.com> from\n  \\line 'From: Jessica Smith <jessica@example.com>'\nOK. Log says:\nSendmail: /usr/sbin/sendmail -i jessica@example.com\nFrom: Jessica Smith <jessica@example.com>\nTo: jessica@example.com\nSubject: [PATCH 1/2] added limit to log function\nDate: Sat, 30 May 2009 13:29:15 -0700\nMessage-Id: <1243715356-61726-1-git-send-email-jessica@example.com>\nX-Mailer: git-send-email 1.6.2.rc1.20.g8c5b.dirty\nIn-Reply-To: <y>\nReferences: <y>\n\nResult: OK\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("以上来源git官网，当处在这种工作环境再看网上资料，因为没有多必要使用"),a("code",[s._v("git send-mail")])])]),s._v(" "),a("h3",{attrs:{id:"fork工作流-rebase-request-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork工作流-rebase-request-pull"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" fork工作流/rebase&&request-pull")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("向公开项目做贡献因为没有权限直接更新项目的分支,许多项目维护者期望fork风格的贡献")]),s._v(" "),a("p",[s._v("首先克隆开源项目主仓库，为计划贡献的补丁或补丁序列创建一个featureA分支，然后在那儿做工作。 顺序看起来基本像这样：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git clone <url>\n$ cd project\n$ git checkout -b featureA\n  ... work ...\n$ git commit\n  ... work ...\n$ git commit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("可以使用"),a("code",[s._v("rebase -i")]),s._v("将工作压缩成一个单独的提交，或者重排提交中的工作使补丁更容易被维护者审核")])]),s._v(" "),a("p",[s._v("当你的分支工作完成后准备将其贡献回维护者，去原始项目中然后点击“Fork”按钮，创建一份自己的可写的项目派生仓库。然后需要在本地仓库中将该仓库添加为一个新的远程仓库，在本例中称作 myfork")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" git remote add myfork <url>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后推送工作diff到上面featureA分支。相对于合并到主分支再推送上去，推送你正在工作的featureA分支到仓库上更简单。原因是工作diff如果不被merge/rebase、cherry-pick或者是被部分接收的，就不必回退你的主分支。如果维护者合并、变基或拣选你的工作，不管怎样你最终可以通过拉取他们的仓库找回来你的工作。")]),s._v(" "),a("p",[s._v("你可以使用下面的命令推送你的工作：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git push -u myfork featureA\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当工作已经被推送到你的派生仓库后，你需要通知原项目的维护者你有想要他们合并的工作。 这通常被称作一个拉取请求（Pull Request）,你通常可以通过网站生成它—— GitHub有它自己的"),a("code",[s._v("Pull Request")]),s._v("机制")]),s._v(" "),a("p",[s._v("也可以运行"),a("code",[s._v("git request-pull")]),s._v("命令然后将随后的输出通过电子邮件手动发送给项目维护者")]),s._v(" "),a("p",[a("code",[s._v("git request-pull")]),s._v("命令接受一个拉取的Git仓库的URL以及拉取分支作为比较，产生一个请求合并的所有修改摘要。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git request-pull origin/master myfork//注意顺序\nThe following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:\nJessica Smith (1):\n        added a new function\n\nare available in the git repository at:\n\n  git://githost/simplegit.git featureA\n\nJessica Smith (2):\n      add limit to log function\n      change log output to 30 from 25\n\n lib/simplegit.rb |   10 +++++++++-\n 1 files changed, 9 insertions(+), 1 deletions(-)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("此输出可被发送给维护者——它告诉他们工作是从哪个分支开始的、提交的摘要、以及从哪里拉取这些工作。")]),s._v(" "),a("p",[s._v("在一个你不是维护者的项目上，有一个总是跟踪"),a("code",[s._v("origin/master")]),s._v("的master分支会很方便，在featureA分支上做工作是因为如果它们被拒绝时你可以轻松地丢弃\n此外，你想要提供第二个featureB工作到项目，不要继续在刚刚推送的featureA分支上工作，从主仓库的 master 分支重新开始：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git checkout -b featureB origin/master\n  ... work ...\n$ git commit\n$ git push myfork featureB\n$ git request-pull origin/master myfork\n  ... email generated request pull to maintainer ...\n$ git fetch origin\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("现在，每一个特性都保存在一个贮藏库中——类似于补丁队列——可以重写、变基与修改而不会让特性互相干涉或互相依赖，像这样：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/public-small-1.png",alt:""}})])],1),s._v(" "),a("h3",{attrs:{id:"git-push-f-u用在哪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-push-f-u用在哪"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" "),a("code",[s._v("git push -f/-u")]),s._v("用在哪")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("-f用来把历史较旧的diff或没有关联的强制提交,-u用来增加关联常用推送一个远程没有的分支")]),s._v(" "),a("p",[s._v("假设项目维护者已经拉取了一串其他补丁，然后你尝试更新了维护者的项目并拉取你的featureA分支diff，但是冲突了。 在这种情况下，你可以尝试变基那个分支到 origin/master 的顶部，为维护者解决冲突，然后重新提交你的改动")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git checkout featureA\n$ git rebase origin/master\n$ git push -f myfork featureA\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这样会重写你的历史，现在看起来像是 featureA 工作之后的提交历史（都在克隆项目上）\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/public-small-2.png",alt:""}})])],1),s._v(" "),a("p",[s._v("因为你将分支变基了（远程的featureA和本地的featureA错开了），所以必须为推送命令指定 -f 选项，这样才能将服务器上有一个不是它后代的提交的featureA分支替换掉。")]),s._v(" "),a("p",[s._v("或者你也可以推送这个新工作到服务器上的一个不同分支（可能称作 featureAv2）。")]),s._v(" "),a("p",[s._v("还有一种创建新分支的情况，假设维护者看到了你featureB工作并且很喜欢其中的逻辑并希望你进一步修改，然后你从现在的 origin/master 分支（myfork）开始一个新分支，在那儿压缩 featureB 的改动，解决任何冲突，改变实现，然后推送它为一个新分支（可能称作 featureBv2）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git checkout -b featureBv2 origin/master\n$ git merge --squash featureB\n  ... change implementation ...\n$ git commit\n$ git push myfork featureBv2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("code",[s._v("--squash")]),s._v("选项把被合并的分支上的所有工作压缩至一个diff使仓库变成一个真正的合并发生的状态，而不会真的生成一个合并提交。你可以在记录一个新提交前做更多的改动。\n其实merge命令的"),a("code",[s._v("--no-commit")]),s._v("选项在默认合并过程中也可以用来延迟生成合并提交。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/public-small-3.png",alt:""}})])],1),s._v(" "),a("p",[s._v("现在你可以给维护者发送一条消息，表示你已经做了要求的修改然后他们可以在你的"),a("code",[s._v("featureBv2")]),s._v(" 分支上找到那些改动。")]),s._v(" "),a("h2",{attrs:{id:"查看git仓库地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看git仓库地址"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" 查看git仓库地址")]),s._v(" "),a("p",[s._v("方式一指令："),a("code",[s._v("git remote -v")])]),s._v(" "),a("p",[s._v("方式二客户端：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-05-01_17-46-02.png",alt:""}})]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-05-01_18-09-12.png",alt:""}})])],1),s._v(" "),a("p",[s._v("方式三文件系统:\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-05-01_17-47-38.png",alt:""}})])],1),s._v(" "),a("h2",{attrs:{id:"git工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git工作流"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v("  git工作流")]),s._v(" "),a("h3",{attrs:{id:"集中式工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集中式工作流"}},[s._v("#")]),s._v(" 集中式工作流")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("这种工作方式跟svn类似，它只有一个master分支，开发者会先把远程的仓库克隆到本地，之后的修改和提交都在本地操作，直到在某个合适的时间点将本地的代码合入到远程master。这种工作流比较适合小团队，因为小团队可能不会太多的协作和合流的动作\n在开发者提交自己的修改到master前，需要先fetch/pull在master的新增提交，rebase/merge自己的提交于master的最新版本,比如"),a("code",[s._v("git pull --rebase origin master")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"功能开发工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能开发工作流"}},[s._v("#")]),s._v(" 功能开发工作流")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("这种工作流关注功能开发，不直接往master提交代码保证它是稳定并且干净的，而是从master拉取feature分支进行功能开发，团队成员根据分工拉取不同的功能分支来进行不同的功能开发，这样就可以完全隔离开每个人的工作。当功能开发完成后，会向master分支发起"),a("code",[s._v("Pull Request")]),s._v("，只有审核通过的代码才真正允许合入master，这样就加强了团队成员之间的代码交流，也就是我们常说的Code Review。")]),s._v(" "),a("p",[s._v("开发者每次在开始新功能前先创建一个新分支(本地/远程), 功能分支应该有个有描述性的名字，这样可以让分支有个清楚且高聚焦的用途。一旦某个开发完成一个功能，不是立即合并到master，而是push到中央仓库的功能分支上并发起一个"),a("code",[s._v("Pull Request")]),s._v("请求去合并修改到master。")]),s._v(" "),a("h3",{attrs:{id:"gitflow工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitflow工作流"}},[s._v("#")]),s._v(" Gitflow工作流")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("适合用来管理大型项目的发布和维护。贯穿整个开发周期，master和dev分支是一直存在的")]),s._v(" "),a("blockquote",[a("p",[s._v("dev最新版本集成分支")])]),s._v(" "),a("ul",[a("li",[s._v("最新的版本都dev分支集成，merge from 分支feature和hotfix；merge to分支release或master。")]),s._v(" "),a("li",[s._v("所有开发人员都可提交代码到dev（个别产品因管理需要，dev分支设置为指定人员才有合并权限）")]),s._v(" "),a("li",[s._v("在dev上运行持续集成并部署到开发集成环境，进行自动化代码走查和自动化测试。")])]),s._v(" "),a("blockquote",[a("p",[s._v("release项目测试和交付分支")])]),s._v(" "),a("ul",[a("li",[s._v("项目交付版本须从release分支构建，merge from 分支dev或hotfix。")]),s._v(" "),a("li",[s._v("当最新的dev版本先交付到项目，从dev合入release;合入release的时机和是产生了可供测试或可交付项目部署的版本")]),s._v(" "),a("li",[s._v("项目交付版本有bug，如果当前在并行开发下一个版本，则从release分支创建hotfix分支改bug从而释放dev可接受下一个版本的集成")]),s._v(" "),a("li",[s._v("如果当前还没有下一个版本的开发，则在dev上改bug相比于拉分支改bug可减少了一次合入dev的工作量。")]),s._v(" "),a("li",[s._v("项目版本提测时在release分支自动构建并部署到项目测试环境，并对源码自动打tag。")])]),s._v(" "),a("blockquote",[a("p",[s._v("master产品测试和发布")])]),s._v(" "),a("ul",[a("li",[s._v("产品发版本须master分支构建，merge from 分支dev或hotfix或release。")]),s._v(" "),a("li",[s._v("当最新的dev版本先在产品发布，则dev合入master分支。合入master的时机和是产生了可供测试产品版本")]),s._v(" "),a("li",[s._v("master有bug，如果当前在并行开发下一个版本，则从产品发布master创建hotfix分支改bug从而释放dev可接受下一个版本的集成")]),s._v(" "),a("li",[s._v("如果当前还没有下一个版本的开发，则在dev上改bug相比于拉分支改bug，减少了一次合入dev的工作量。")]),s._v(" "),a("li",[s._v("产品版本提测时在master分支自动构建并部署到产品测试环境，并对源码自动打tag。")])]),s._v(" "),a("blockquote",[a("p",[s._v("feature功能分支")])]),s._v(" "),a("ul",[a("li",[s._v("命名规范feature-功能简述-[计划交付日期] 示例：feature-车辆感知数据格式兼容-20191104")]),s._v(" "),a("li",[s._v("功能开发分支， create from 分支dev，merge to分支dev。开发完成，合入dev分支并验证通过后删除。")])]),s._v(" "),a("blockquote",[a("p",[s._v("hotfix修复分支")])]),s._v(" "),a("p",[s._v("-命名规范hotfix-模块版本号 示例：hotfix-1.0.0.a4dce63b.20191119205923")]),s._v(" "),a("ul",[a("li",[s._v("改bug分支，一般create from 分支release、master、tag分支，merge to分支release、master、dev分支。")]),s._v(" "),a("li",[s._v("hotfix改bug后，若最新版本也存在相同bug须合并回dev，合入dev分支并验证通过后删除")])]),s._v(" "),a("h3",{attrs:{id:"fork工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork工作流"}},[s._v("#")]),s._v(" Fork工作流")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("Forking工作流常用于开源项目，它有一个公开的中央仓库，其他贡献者可以Fork（克隆）这个仓库作为你自己的私有仓库，开源项目维护者可以直接往中央仓库push代码，而代码贡献者只能将代码push到自己的私有仓库，只有项目维护者接受代码贡献者往中央仓库发起的pull request才会真正合入")]),s._v(" "),a("h2",{attrs:{id:"fork同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork同步"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v("  fork同步")]),s._v(" "),a("p",[s._v("我们在进行Github协同开发的时候，往往会去fork一个仓库到自己的Github中，过一段时间以后，原仓库可能会有各种提交以及修改，很可惜，Github本身并没有自动进行同步的机制，这个需要我们手动去执行")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("查看你的远程仓库的路径\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/1528859569898_71.png",alt:""}})])],1)]),s._v(" "),a("li",[a("p",[s._v("配置原仓库的路径（添加主repo为上游代码库）：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/1528859569861_70.png",alt:""}})])],1)])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("务必cd到你自己fork出来的库里面去，比如工程名叫luoluo，那要先cd到luoluo中去，然后操作")])]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[s._v("再次查看远程目录的位置\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/1528859570117_74.png",alt:""}})])],1)]),s._v(" "),a("li",[a("p",[s._v("抓取原仓库的修改文件\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/1528859569961_72.png",alt:""}})])],1)]),s._v(" "),a("li",[a("p",[s._v("切换到master分支\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/1528859569820_69.png",alt:""}})])],1)]),s._v(" "),a("li",[a("p",[s._v("合并远程的master分支\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/1528859570004_73.png",alt:""}})])],1)]),s._v(" "),a("li",[a("p",[s._v("此时，你的本地库已经和原仓库已经完全同步了。但是注意，此时只是你电脑上的本地库和远程的github原仓库同步了，你自己的github仓库还没有同步，此时需要使用“git push”命令把你本地的仓库提交到github中\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20180614163016948.png",alt:""}})])],1)])]),s._v(" "),a("p",[s._v("其实4,5,6,可以合并成一条命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git pull upstream master\n// 第一个参数upstream 表示远程主repo\n// 第二个参数master表示自己fork库的master分支,省略了默认本地追踪的的远程master第三个参数\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"vscode中git技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vscode中git技巧"}},[s._v("#")]),s._v(" vscode中git技巧")]),s._v(" "),a("h2",{attrs:{id:"可视化git-gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可视化git-gitlab"}},[s._v("#")]),s._v(" 可视化git/gitlab")]),s._v(" "),a("p",[s._v("命令式都会担心什么可视化的操作，花点时间看下就明白啦")]),s._v(" "),a("h2",{attrs:{id:"ssh配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh配置"}},[s._v("#")]),s._v(" ssh配置")]),s._v(" "),a("h3",{attrs:{id:"ssh免密多主机互通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh免密多主机互通"}},[s._v("#")]),s._v(" SSH免密多主机互通")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("authorized_keys:存放请求ssh登陆的那些机器远程免密登录的公钥,主要通过这个文件验证多台机器的公钥")]),s._v(" "),a("p",[s._v("id_rsa : 生成的私钥文件")]),s._v(" "),a("p",[s._v("id_rsa.pub ： 生成的公钥文件")]),s._v(" "),a("p",[s._v("know_hosts : 每登陆过一台远程机器本机都会记录登陆过机器的公钥清单，用来防止DNS Hijack（DNS 劫持）")])]),s._v(" "),a("h3",{attrs:{id:"基本原理校验流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本原理校验流程图"}},[s._v("#")]),s._v(" 基本原理校验流程图")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("多主机互通本质是本机带过去的公钥通过远程主机authorized_keys验证，远程主机返回加密后的公钥通过本机的私钥验证，同时.ssh相关文件读写权限正确，known_hosts验证通过（可关闭）")]),s._v(" "),a("p",[s._v("ssh-keygen 用于为生成、管理和转换认证密钥，包括 RSA 和 DSA 两种密钥，密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥")]),s._v(" "),a("p",[s._v("一般说来，如果用户希望使用RSA或DSA认证，那么运行一次这个程序，会在 "),a("code",[s._v("~/.ssh/identity")]),s._v("或"),a("code",[s._v("~/.ssh/id_dsa")]),s._v(" 或 "),a("code",[s._v("~/.ssh/id_rsa")]),s._v(" 文件中创建认证所需的密钥\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20181214180811108.png",alt:""}})])],1),s._v(" "),a("h3",{attrs:{id:"说在前面-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说在前面-2"}},[s._v("#")]),s._v(" 说在前面")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("首先要明白的是linux的秘钥产生与服务器无关，只加密的方式（采用rsa或dsa）还有passphrase（密码短语，在生成秘钥的时候输入）有关，通过"),a("code",[s._v("ssh-keygen -t rsa")]),s._v("生成的公私钥对是随机的。")]),s._v(" "),a("p",[s._v("同一对秘钥可以使用在多台服务器上，因为对于服务器和客户端来说，他们在通信的时候只需验证秘钥和公钥是否匹配。")]),s._v(" "),a("p",[s._v("多个id_rsa.pub内容拼合而成一个authorized_keys用来检查ssh访问本机那个请求带来的公钥是否在本公钥列表中,没有则拒绝")]),s._v(" "),a("blockquote",[a("p",[s._v("两种将 id_rsa.pub 追加到各个机器的 authorized_keys 两种方式")])]),s._v(" "),a("ul",[a("li",[s._v("方式1:使用 ssh 自带的工具进行 管理")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh-copy-id -i ~/.ssh/id_rsa.pub root@master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面命令的功能ssh-copy-id将pub值写入远程机器的~/.ssh/authorized_key中")]),s._v(" "),a("ul",[a("li",[s._v("方式2:将  ~/.ssh/id_rsa.pub 追加到 authorized_key 文件中， 并传递给其他机器。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cat id_rsa.pub >> authorized_key\nscp authorized_key root@192.168.75.*:~/.ssh/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("各个文件的权限")])]),s._v(" "),a("ul",[a("li",[s._v("authorized_key 的文件权限为 600")]),s._v(" "),a("li",[s._v("id_rsa 的文件权限为 600")]),s._v(" "),a("li",[s._v("id_rsa.pub 的文件权限为 644")]),s._v(" "),a("li",[s._v("known_hosts 的文件权限为 644")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[root@cdh-manager .ssh]# ll\ntotal 16\n-rw-------  1 root root  412 Dec 14 01:58 authorized_keys\n-rw-------  1 root root 1679 Dec 13 08:17 id_rsa\n-rw-r--r--  1 root root  398 Dec 13 08:17 id_rsa.pub\n-rw-r--r--  1 root root  398 Dec 13 08:17 known_hosts\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[s._v(".ssh目录文件的权限应该为700")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("drwx------  2 root root    80 Dec 14 01:58 .ssh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("常见的权限表示形式")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("-rw------- (600)只有拥有者有读写权限。\n-rw-r--r-- (644)只有拥有者有读写权限；而属组用户和其他用户只有读权限。\n-rwx------ (700)只有拥有者有读、写、执行权限。\n-rwxr-xr-x (755)拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。\n-rwx--x--x (711)拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。\n-rw-rw-rw- (666)所有用户都有文件读、写权限。\n-rwxrwxrwx (777)所有用户都有读、写、执行权限。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"常见答疑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见答疑"}},[s._v("#")]),s._v(" 常见答疑")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("是否需要每台机器都生成密钥？")])]),s._v(" "),a("p",[s._v("非必需每台机器都生成密钥，只需要在其中一台机器生成密钥即可。之后，我们只需要将密钥传给其他的机器。")]),s._v(" "),a("blockquote",[a("p",[s._v("是否需要关闭防火墙")])]),s._v(" "),a("p",[s._v("不需要关闭防火墙，就能达到免密登录。")]),s._v(" "),a("blockquote",[a("p",[s._v("是否一定是空的密钥")])]),s._v(" "),a("p",[s._v("是的。生成的密钥必须是空密钥，非空密码测试没通过")]),s._v(" "),a("blockquote",[a("p",[s._v("authorized_keys中注释格式")])]),s._v(" "),a("p",[s._v("文件中可以用 # 注释,比如")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[root@cdh-manager .ssh]# cat authorized_keys\n#集群免密\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaHl0zHV3ZAhJuhLWgs02WzMIDCMU3isnrAipOvQBjM5e7oEfh3RWcSVEef3TkHPagCw+3ovR49nKSMeWJGsw2dtI4V2uoNgrN0/XgBCmrqJ9EgXZrhlMJbsnU9Mjn2J8w13b5ZtTzC+5HLagYQn1yDnZsRk3B/SKFJqAuOE8i/itUp24NLuyK2etTUpBtStNtZnm2VRhEf9bZBxOfzJjbAz6trryKWN4UMI0xwHV4hWFhVnZmUly+nGfzNJAA2bQOt2MnVnw9xXLl7+ZYloYInXynU3y1TBR8NlffEbrJqKRGiwCCP9w09Wc2pqB/04qFYJTgn+bcGfBJD4zMZe5J root@cdh-manager\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"github通讯ssh解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github通讯ssh解释"}},[s._v("#")]),s._v(" github通讯ssh解释")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("我们在 github 上添加 SSH key执行"),a("code",[s._v('ssh-keygen -t rsa -C "your_email@example.com"')]),s._v(",代码参数含义：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("-t 指定密钥类型，默认是 rsa ，可以省略。\n-C 设置注释文字，比如邮箱。\n-f 指定密钥文件存储文件名。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Generating public/private rsa key pair.\n# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。\n接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），")]),s._v(" "),a("p",[s._v("当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Enter passphrase (empty for no passphrase):\n# Enter same passphrase again:\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接下来，就会显示如下代码提示，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Your identification has been saved in /c/Users/you/.ssh/id_rsa.\n# Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\n# The key fingerprint is:\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了")]),s._v(" "),a("p",[s._v("测试一下该SSH key在git Bash 中输入以下代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ ssh -T git@github.com\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当你输入以上代码时，会有一段警告代码，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("The authenticity of host 'github.com (207.97.227.239)' can't be established.\n# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n# Are you sure you want to continue connecting (yes/no)?\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Enter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当然如果你密码输错了，会再要求你输入，知道对了为止。")]),s._v(" "),a("p",[s._v("注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。")]),s._v(" "),a("p",[s._v("密码正确后你会看到下面这段话，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Hi username! You've successfully authenticated, but GitHub does not\n# provide shell access.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如果用户名是正确的,你已经成功设置SSH密钥")]),s._v(" "),a("h3",{attrs:{id:"两主机互通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两主机互通"}},[s._v("#")]),s._v(" 两主机互通")]),s._v(" "),a("hr"),s._v(" "),a("ol",[a("li",[a("p",[s._v("在两台主机(192.168.65.3/192.168.65.2)上执行"),a("code",[s._v("ssh-keygen -t rsa")]),s._v("命令生成秘钥，会在用户家目录的"),a("code",[s._v(".ssh")]),s._v("文件夹下生成ssh的配置文件\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20180412200221338.png",alt:""}})])],1)]),s._v(" "),a("li",[a("p",[s._v("将两台主机彼此的公钥配置到另一台机器的ssh配置文件中。在此之前，需要将所有的机器中的ssh服务开启，命令为"),a("code",[s._v("service sshd start")]),s._v("。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20180412200913203.png",alt:""}})])],1)]),s._v(" "),a("li",[a("p",[s._v("开启两台机器的ssh服务后，将自己的id_rsa.pub的配置文件上传到彼此的ssh配置文件中。执行命令为"),a("code",[s._v("ssh-copy-id -i id_rsa.pub 用户名@IP地址")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20180412201548571.png",alt:""}})])],1),s._v(" "),a("p",[s._v("在192.168.65.2的机器上执行命令，将自己的公钥id_rsa.pub传入到192.168.65.3的机器上,同时本机出现known_hosts。")]),s._v(" "),a("p",[s._v("执行上一步操作后，切换登陆到192.168.65.3的机器上，可以看到在家目录的.ssh文件夹下，多了一个文件authorized_keys文件，此文件中记录了刚刚由192.168.65.2机器传过来的公钥信息。")]),s._v(" "),a("p",[s._v("下面我们在192.168.65.3的机器上执行命令，将自己的公钥id_rsa.pub传入到192.168.65.2的机器上。具体操作同上一步分别在两台机器各自生成对应的known_hosts、authorized_keys\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/20180412202400308.png",alt:""}})])],1)]),s._v(" "),a("li",[a("p",[s._v("至此就完成了ssh密钥的相关配置，两主机可以免密互相登陆")])])]),s._v(" "),a("h3",{attrs:{id:"三主机互通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三主机互通"}},[s._v("#")]),s._v(" 三主机互通")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("现用虚拟机搭建三台主机,IP分别是:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("192.168.33.201 master1\n192.168.33.202 master2\n192.168.33.203 master3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("方法一:")])]),s._v(" "),a("p",[s._v("先选择其中一台主机,在该主机上生成公钥和私钥,再将公钥和私钥上传到其他主机上,具体操作如下:")]),s._v(" "),a("p",[s._v("选择master1进行操做:")]),s._v(" "),a("p",[s._v("1.登录Linux系统,根据自己实际情况选择登录用户,执行下面代码生成公钥私钥对:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh-keygen -t rsa\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("会出现如下提示,一路回车就行")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[root@master1 ~]# ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): //这里回车\nEnter passphrase (empty for no passphrase): //这里回车\nEnter same passphrase again: //这里回车\nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\ndf:71:f6:3e:bb:bb:6c:38:91:f4:bc:70:a1:dd:86:a9 root@master1\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|                 |\n|                 |\n|                 |\n|             . . |\n|        S   o Ooo|\n|         . . Oo*o|\n|          . ..=.o|\n|            Eo.= |\n|              o*B|\n+-----------------+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("注意：在程序提示输入passphrase时直接输入回车，表示无证书密码。")]),s._v(" "),a("p",[s._v("2.生成秘钥的默认目录为:~/.ssh,该目录下会生成下面两个文件:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("id_rsa\nid_rsa.pub\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("3.实现本地免密登录,将id_rsa.pub中的内容拷贝到authorized_keys")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh-copy-id localhost\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("~/.ssh目录下会生成一个新的文件:authorized_keys")]),s._v(" "),a("p",[s._v("4.完成上述步骤后就可以本地SSH免密登录了,运行下面代码出现一行登录时间就代表本地SSH免密登录成功")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[root@master1 ~]$ ssh localhost\nLast login: Mon Aug 27 08:41:20 2018 from 192.168.33.2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("5.如果本机能成功SSH免密登录,先退出SSH登录:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("exit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("再执行以下代码将本机的~/.ssh文件夹复制到其他主机上:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("scp -r ~/.ssh 192.168.33.202:~/\nscp -r ~/.ssh 192.168.33.203:~/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("提示输入密码时,输入远程主机密码回车即可")]),s._v(" "),a("blockquote",[a("p",[s._v("方法二:")])]),s._v(" "),a("p",[s._v("将每台机器生成的id_rsa.pub追加添加到同一个authorized_keys内,然后再将该authorized_keys发送到其他远程主机上.")]),s._v(" "),a("p",[s._v("1.在master1,master2,master3上分别执行:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh-keygen -t rsa\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v('与"方法一"内所述一样,一路回车即可,生成秘钥的默认目录为~/.ssh')]),s._v(" "),a("p",[s._v("2.接着制作包含master1,master2,master3中所有id_rsa.pub的authorized_keys文件:")]),s._v(" "),a("p",[s._v("此处在master 1上生成authorized_keys文件,在master1上执行:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh-copy-id -i 192.168.33.201\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在master2上执行:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh-copy-id -i 192.168.33.201\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在master3上执行:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh-copy-id -i 192.168.33.201\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v('注意:此处代码中的"-i"千万不要忘记了!!!，这样master1中的authorized_keys文件包含了三个主机的公钥')]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[s._v("通过scp将master1上生成的authorized_keys文件发送给其他主机:\n在master1上执行")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("scp -r ~/.ssh/authorized_keys 192.168.33.202:~/.ssh\nscp -r ~/.ssh/authorized_keys 192.168.33.203:~/.ssh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[s._v("提示输入密码时,输入远程主机密码回车即可")])]),s._v(" "),a("li",[a("p",[s._v("测试SSH免密登录,可先测试本机免密登录,再测试远程主机远程登录")])])]),s._v(" "),a("p",[s._v("本机登录可用:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh localhost\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("远程登录将localhost换成远程主机IP即可,比如在master1上登录master2,就在master1上执行:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh 192.168.33.202\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"关于使用securecrt-winscp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于使用securecrt-winscp"}},[s._v("#")]),s._v(" 关于使用SecureCRT/winscp")]),s._v(" "),a("hr"),s._v(" "),a("ol",[a("li",[a("p",[s._v("使用SecureCRT创建私钥和公钥\nSecureCRT quick Connect-> Authentiation -> Public Key -> Properties ->Create Identity File -> DSA/RSA -> Set Passphrase -> Done\n这个时候在指定目录会生成两个文件，例如，私钥my_rsa和公钥my_rsa.pub")])]),s._v(" "),a("li",[a("p",[s._v("linux服务器上建立.ssh目录,一般情况下,已经有这个目录(更改权限很重要，认证的时候权限不是700不给通过)")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# mkdir /root/.ssh\n# chmod 700 /root/.ssh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("将公钥my_rsa.pub传到linux服务器，将SSH2兼容格式的公钥转换成为Openssh兼容格式(查看/etc/ssh/sshd_config文件的AuthorizedKeysFile这行是否为.ssh/authorized_keys，有说法是自ssh3版本之后就不默认为.ssh/authorized_keys2了,改为.ssh/authorized_keys,实际上是.ssh2和.ssh的区别)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# ssh-keygen -i -f Identity.pub >> /root/.ssh/authorized_keys2//注意这里多了个2，使用的是ssh2不是openssh,-f由于公钥名改了不是id_ras.pub指定文件名\n# chmod 600 /root/.ssh/authorized_keys2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("4.在SecureCRT里面设置登录模式为PublicKey，并选择刚刚创建的my_rsa文件作为私钥")]),s._v(" "),a("p",[s._v("5.重启Linux服务器上SSH服务器（测试不用重启服务也能生效）A和B机使用的同一对authorized_keys2，CRT都能实现自动登陆")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#service sshd restart或者/etc/init.d/ssh restart\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("6.由于linux的sshd服务设置了密钥登录，原来的密码登录就完全可以去掉，不去掉也行")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ sudo vim /etc/ssh/sshd_config\nProtocol 2 //仅允许使用SSH2\nPubkeyAuthentication yes //启用PublicKey认证\nAuthorizedKeysFile .ssh/authorized_keys2 //PublicKey文件路径\nPasswordAuthentication no //禁止密码验证登录\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ol",{attrs:{start:"7"}},[a("li",[s._v("把创建的私钥共享")])]),s._v(" "),a("p",[s._v("由于securecrt创建的私钥不同于winscp使用的私钥格式，需要转换"),a("code",[s._v("securecrt>>tools>>Convert Private Key to OpenSSH Format ...")]),s._v("保存成openssh格式的密钥对，然后运行winscp包里的"),a("code",[s._v("puttygen>>Conversions>>Import key")]),s._v("选择刚才转换的私钥，输入"),a("code",[s._v("key passphrase")]),s._v("后，选择"),a("code",[s._v("Save private key")]),s._v(",保存成ppk格式的文件")]),s._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[s._v("以上步骤是使用SecureCRT生成的密钥对来进行登录验证的，其实也可以在服务器上使用ssh-keygen命令生成的密钥，同样在生成密钥对之后，将格式转换成SecureCRT使用的SSH2格式")])]),s._v(" "),a("h3",{attrs:{id:"集群多机ssh互通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群多机ssh互通"}},[s._v("#")]),s._v(" 集群多机ssh互通")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("1、生成公钥和私钥")]),s._v(" "),a("p",[s._v("在主节点中，执行：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ssh-keygen -t rsa\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后，不断的按回车键。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("2、将公钥复制到其他从机")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("scp ~/.ssh/authorized_keys root@slave1:~/.ssh/\nscp ~/.ssh/authorized_keys root@slave2:~/.ssh/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面两个步骤，首次需要输入root用户登录slave1的密码，以及root用户登录slave2的密码。")]),s._v(" "),a("p",[s._v("注意：上述的操作过程只是单向的，即此时，ssh root@slave1和ssh root@slave2是不需要密码的。而ssh root@master等反向仍然是需要密码的。\n因为远程从机的公私钥不在authorized_keys中，可以拷贝主节点的公私钥（注意不是authorized_keys）到所有从机即可多机免密互通")]),s._v(" "),a("h3",{attrs:{id:"ssh出错分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh出错分析"}},[s._v("#")]),s._v(" ssh出错分析")]),s._v(" "),a("hr"),s._v(" "),a("ol",[a("li",[a("p",[s._v("目录权限问题")])]),s._v(" "),a("li",[a("p",[s._v("造成故障的原因是之前配置过程中配置失败,然后重新对SSH免密登录进行配置,配置完成后无法正常登录,解决方法为删除各主机下~/.ssh目录中的known_hosts文件:")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("rm -rf ~/.ssh/known_hosts\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"ssh下known-hosts的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh下known-hosts的作用"}},[s._v("#")]),s._v(" ssh下known_hosts的作用")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("known_hosts中的格式是")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Ip或域名  主机名 host-key\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在平时工作中，有时候需要SSH登陆到别的Linux主机上去，但有时候SSH登陆会被禁止，并弹出如下类似提示：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/789766-20190722214604298-332962490.png",alt:""}})]),s._v("\n返回的信息是什么意思？")],1),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n可能是有人做了不好的事\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\n有人可能监听你，对你进行了中间人攻击\nIt is also possible that a host key has just been changed.\n也有可能host key刚刚改变了。\nThe fingerprint for the ECDSA key sent by the remote host is\nSHA256:XXXXX\n远程主机发送过来的ECDSA key 指纹是xxxxx\nPlease contact your system administrator.\nAdd correct host key in /Users/fangzhijie/.ssh/known_hosts to get rid of this message.\n添加正确的host key到这个文件中来避免这条信息。\n\nOffending ECDSA key in /Users/fangzhijie/.ssh/known_hosts:8\nECDSA host key for bei1 has changed and you have requested strict checking.\nHost key verification failed.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("ssh会把你每个你访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告， 避免你受到DNS Hijack(DNS劫持)之类的攻击。上面列出的情况，就是这种情况。使用known_hosts的作用是防止DNS攻击\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-05-01_18-16-16.png",alt:""}})])],1),s._v(" "),a("p",[s._v("经常发生的情况是一台主机上有多个Linux系统，会经常切换，那么这些系统使用同一ip，登录过一次后就会把ssh信息记录在本地的~/.ssh/known_hosts文件中，切换该系统后再用ssh访问这台主机就会出现冲突警告，原因不同系统很可能公钥不一致，需要手动删除修改known_hsots里面的内容。")]),s._v(" "),a("blockquote",[a("p",[s._v("解决方案")])]),s._v(" "),a("ol",[a("li",[s._v("手动删除修改known_hsots里面的内容；")]),s._v(" "),a("li",[s._v("修改配置文件“~/.ssh/config”，加上这两行，重启服务器。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("   StrictHostKeyChecking no\n   UserKnownHostsFile /dev/null\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("找到known_hosts这个文件，将远程主机发来的指纹（下面被红笔覆盖的）\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/789766-20190722214604298-332962490.png",alt:""}})]),s._v("\n替换到bei1对应指纹。重新连接，发现问题解决。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/789766-20190722215928914-98738159.png",alt:""}})])],1)]),s._v(" "),a("blockquote",[a("p",[s._v("优缺点分析")])]),s._v(" "),a("ol",[a("li",[s._v("方式一需要每次手动删除文件内容，一些自动化脚本的无法运行（在SSH登陆时失败），安全性高；")]),s._v(" "),a("li",[s._v("方式二SSH登陆时会忽略known_hosts的访问，安全性低")]),s._v(" "),a("li",[s._v("方式三对症下药")])]),s._v(" "),a("h3",{attrs:{id:"ssh-keygen使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh-keygen使用"}},[s._v("#")]),s._v(" ssh-keygen使用")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("通常，这个程序产生一个密钥对，并要求指定一个文件存放私钥，同时将公钥存放在附加了”.pub”后缀的同名文件中。\n程序同时要求输入一个密语字符串(passphrase)，空表示没有密语(主机密钥的密语必须为空)。\n密语和口令(password)非常相似，但是密语可以是一句话，里面有单词、标点符号、数字、空格或任何你想要的字符。\n好的密语要30个以上的字符，难以猜出，由大小写字母、数字、非字母混合组成。密语可以用 -p 选项修改。\n丢失的密语不可恢复。如果丢失或忘记了密语，用户必须产生新的密钥，然后把相应的公钥分发到其他机器上去。\nRSA1的密钥文件中有一个”注释”字段，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。\n创建密钥的时候，注释域初始化为”user@host”，以后可以用 -c 选项修改。\n密钥产生后，下面的命令描述了怎样处置和激活密钥。可用的选项有：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[s._v("配置")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("解释")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-a trials")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("在使用 -T 对 DH-GEX 候选素数进行安全筛选时需要执行的基本测试数量。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-B")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("显示指定的公钥/私钥文件的 bubblebabble 摘要。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-b bits")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-C comment")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("提供一个新注释")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-c")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("要求修改私钥和公钥文件中的注释。本选项只支持 RSA1 密钥。程序将提示输入私钥文件名、密语(如果存在)、新注释。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-D reader")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("下载存储在智能卡 reader 里的 RSA 公钥。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-e")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("读取OpenSSH的私钥或公钥文件，并以 RFC 4716 SSH 公钥文件格式在 stdout 上显示出来。该选项能够为多种商业版本的 SSH 输出密钥。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-F hostname")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("在 known_hosts 文件中搜索指定的 hostname ，并列出所有的匹配项。这个选项主要用于查找散列过的主机名/ip地址，还可以和 -H 选项联用打印找到的公钥的散列值。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-f filename")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("指定密钥文件名。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-G output_file")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("为 DH-GEX 产生候选素数。这些素数必须在使用之前使用 -T 选项进行安全筛选。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-g")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("在使用 -r 打印指纹资源记录的时候使用通用的 DNS 格式。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-H")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("对 known_hosts 文件进行散列计算。这将把文件中的所有主机名/ip地址替换为相应的散列值。原来文件的内容将会添加一个”.old”后缀后保存。这些散列值只能被 ssh 和 sshd 使用。这个选项不会修改已经经过散列的主机名/ip地址，因此可以在部分公钥已经散列过的文件上安全使用。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-i")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("读取未加密的SSH-2兼容的私钥/公钥文件，然后在 stdout 显示OpenSSH兼容的私钥/公钥。该选项主要用于从多种商业版本的SSH中导入密钥。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-l")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("显示公钥文件的指纹数据。它也支持 RSA1 的私钥。对于RSA和DSA密钥，将会寻找对应的公钥文件，然后显示其指纹数据。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-M memory")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("指定在生成 DH-GEXS 候选素数的时候最大内存用量(MB)。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-N new_passphrase")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("提供一个新的密语。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-P passphrase")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("提供(旧)密语。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-p")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("要求改变某私钥文件的密语而不重建私钥。程序将提示输入私钥文件名、原来的密语、以及两次输入新密语。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-q")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("安静模式。用于在 /etc/rc 中创建新密钥的时候。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-R hostname")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("从 known_hosts 文件中删除所有属于 hostname 的密钥。这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-r hostname")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("打印名为 hostname 的公钥文件的 SSHFP 指纹资源记录。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-S start")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("指定在生成 DH-GEX 候选模数时的起始点(16进制)。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-T output_file")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("测试 Diffie-Hellman group exchange 候选素数(由 -G 选项生成)的安全性。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-t type")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("指定要创建的密钥类型。可以使用：”rsa1”(SSH-1) “rsa”(SSH-2) “dsa”(SSH-2)")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-U reader")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("把现存的RSA私钥上传到智能卡 reader")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-v")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("详细模式。ssh-keygen 将会输出处理过程的详细调试信息。常用于调试模数的产生过程。重复使用多个 -v 选项将会增加信息的详细程度(最大3次)。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-W generator")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("指定在为 DH-GEX 测试候选模数时想要使用的 generator")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("-y")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("读取OpenSSH专有格式的公钥文件，并将OpenSSH公钥显示在 stdout 上。")])])])]),s._v(" "),a("h3",{attrs:{id:"ssh服务配置文件详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh服务配置文件详解"}},[s._v("#")]),s._v(" SSH服务配置文件详解")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("SSH客户端配置文件"),a("code",[s._v("/etc/ssh/ssh_config")])])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[s._v("选项")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("配置")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("解释")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("ost")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("*")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#选项“Host”只对能够匹配后面字串的计算机有效。“*”表示所有的计算机。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("ForwardAgent")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置连接是否经过验证代理（如果存在）转发给远程计算机。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("ForwardX11")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置X11连接是否被自动重定向到安全的通道和显示集（DISPLAY set）")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("RhostsAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("n")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置是否使用基于rhosts的安全验证。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("RhostsRSAAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置是否使用用RSA算法的基于rhosts的安全验证。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("RSAAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置是否使用RSA算法进行安全验证。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PasswordAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置是否使用口令验证。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("FallBackToRsh")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置如果用ssh连接出现错误是否自动使用rsh。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("UseRsh")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置是否在这台计算机上使用“rlogin/rsh”。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("BatchMode")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#如果设为“yes”，passphrase/password（交互式输入口令）的提示将被禁止。当不能交互式输入口令的时候，这个选项对脚本文件和批处理任务十分有用。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("CheckHostIP")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置ssh是否查看连接到服务器的主机的IP地址以防止DNS欺骗。建议设置为“yes”。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("StrictHostKeyChecking")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#如果设置成“yes”，ssh就不会自动把计算机的密匙加入“$HOME/.ssh/known_hosts”文件，并且一旦计算机的密匙发生了变化，就拒绝连接。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("IdentityFile")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("~/.ssh/identity")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置从哪个文件读取用户的RSA安全验证标识。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("Port")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("22")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置连接到远程主机的端口。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("Cipher")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("blowfish")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置加密用的密码。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("EscapeChar")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("~")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设置escape字符。")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("SSH服务端配置文件"),a("code",[s._v("/etc/ssh/sshd_config")])])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[s._v("选项")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("配置")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("解释")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("Port")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("22")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# SSH 预设使用 22 这个 port，您也可以使用多的 port ！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("Protocol")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("2,1")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 选择的 SSH 协议版本，可以是 1 也可以是 2 ，如果要同时支持两者，就必须要使用 2,1 这个分隔了！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("ListenAddress")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("0.0.0.0")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 监听的主机适配卡！举个例子来说，如果您有两个 IP，分别是 192.168.0.100 及 192.168.2.20 ，那么只想要开放 192.168.0.100 时，就可以写如同下面的样式ListenAddress 192.168.0.100 只监听来自 192.168.0.100 这个 IP 的SSH联机。如果不使用设定的话，则预设所有接口均接受 SSH")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PidFile")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("/var/run/sshd.pid")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 可以放置 SSHD 这个 PID 的档案！左列为默认值")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("LoginGraceTime")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("600")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 当使用者连上 SSH server 之后，会出现输入密码的画面,在该画面中，在多久时间内没有成功连上 SSH server ，就断线！时间为秒！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("Compression")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 是否可以使用压缩指令？")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("HostKey")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("/etc/ssh/ssh_host_key")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# SSH version 1 使用的私钥")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("HostKey")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("/etc/ssh/ssh_host_rsa_key")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# SSH version 2 使用的 RSA 私钥")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("HostKey")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("/etc/ssh/ssh_host_dsa_key")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# SSH version 2 使用的 DSA 私钥")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("KeyRegenerationInterval")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("3600")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 由前面联机的说明可以知道， version 1 会使用 server 的 Public Key ，每隔一段时间来重新建立一次！时间为秒！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("ServerKeyBits")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("768")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# Server key 的长度！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("SyslogFacility")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("AUTH")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 当有人使用 SSH 登入系统的时候，SSH会记录信息")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("LogLevel")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("INFO")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 登录记录的等级---》全部")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PermitRootLogin")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 是否允许 root 登入！预设是允许的，但是建议设定成 no！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("UserLogin")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 在 SSH 底下本来就不接受 login 这个程序的登入！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("StrictModes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 当使用者的 host key 改变之后，Server 就不接受联机")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("RSAAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 是否使用纯的 RSA 认证！？仅针对 version 1 ！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PubkeyAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 是否允许 Public Key ？只有 version 2")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("AuthorizedKeysFile")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v(".ssh/authorized_keys")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("#设定若要使用不需要密码登入的账号时，那么那个账号的存放档案所在档名！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("RhostsAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 本机系统不使用 .rhosts ， .rhosts 不安全！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("IgnoreRhosts")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 是否取消使用 ~/.ssh/.rhosts 来做为认证！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("RhostsRSAAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 针对 version 1 ，使用 rhosts 档案在/etc/hosts.equiv配合 RSA 演算方式来进行认证！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("HostbasedAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 这个项目与上面的项目类似，不过是给 version 2 使用的！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("IgnoreUserKnownHosts")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录的主机内容")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PasswordAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 密码验证当然是需要的！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PermitEmptyPasswords")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 上面那一项如果设定为 yes 的话，这一项就最好设定为 no ，这个项目在是否允许以空的密码登入！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("ChallengeResponseAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 挑战任何的密码认证！所以，任何 login.conf")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PAMAuthenticationViaKbdInt")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 是否启用其它的 PAM 模块！启用这个模块将会导致 PasswordAuthentication 设定失效！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("KerberosAuthentication")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("与Kerberos 有关的参数设定")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("KerberosOrLocalPasswd")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("与Kerberos 有关的参数设定")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("KerberosTicketCleanup")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("与Kerberos 有关的参数设定")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("​KerberosTgtPassing")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("与Kerberos 有关的参数设定")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("X11Forwarding")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("有关在 X-Window 底下使用的相关设定")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("X11DisplayOffset")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("10")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("有关在 X-Window 底下使用的相关设定")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("X11UseLocalhost")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("有关在 X-Window 底下使用的相关设定")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PrintMotd")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("no")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 登入后是否显示出一些信息呢？例如上次登入的时间、地点等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("PrintLastLog")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 显示上次登入的信息！可以啊！预设也是 yes ！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("KeepAlive")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 一般而言，如果设定这项目的话，那么 SSH Server 会传送KeepAlive确保两者的联机正常！在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会有僵尸程序的发生！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("UsePrivilegeSeparation")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("yes")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 使用者的权限设定项目！")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("MaxStartups")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("10")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 同时允许几个尚未登入的联机画面？")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("DenyUsers")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("*")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("# 设定受抵挡的使用者名称")])])])]),s._v(" "),a("h3",{attrs:{id:"dns劫持问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns劫持问题"}},[s._v("#")]),s._v(" DNS劫持问题")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("事实上个人觉得，拥有了私钥ssh登录本应该是万无一失的，但是却还有known_hosts的存在，名义上是防止DNS劫持实际上更像是代码的健壮性，像一些逻辑上貌似不会发生过的情况加以考虑")])]),s._v(" "),a("p",[s._v("那么劫持了怎么办呢？")]),s._v(" "),a("p",[s._v("按下键盘上的WIN+R键，打开运行窗口，然后在运行窗口中输入“CMD”，我们使用命令符的方法来修复自己的DNS\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/adaf2edda3cc7cd9583297d73701213fb80e91a5.png",alt:""}})]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/6f061d950a7b020805be9cef6cd9f2d3572cc84d.png",alt:""}})]),s._v("\n在进入到“cmd”命令符后，复制以下内容“netsh interface ip set dns 本地连接 static 114.114.114.114”到命令符窗口中去。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/91ef76c6a7efce1b74716bc4a151f3deb48f6562.png",alt:""}})]),s._v("\n此时，我们的DNS就已经被设置为正确的DNS了，这样后台就无法偷偷的修改你的DNS了，同样DNS被劫持的问题就迎刃而解了。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/0dd7912397dda14465b6cfbcbcb7d0a20cf48605.png",alt:""}})]),s._v("\n还有一种方法则是手动进入到“网络和共享中心”找到网络连接，选择自己的网络，右击选择属性\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/562c11dfa9ec8a13e5bff4eef903918fa0ecc013.png",alt:""}})]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/6609c93d70cf3bc783826ee2df00baa1cd112a39.png",alt:""}})]),s._v("\n在属性中，选择IPV4协议，双击进入到IPV4协议中，手动修改自己的DNS。\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/dcc451da81cb39db8088c458de160924ab183077.png",alt:""}})]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/a2cc7cd98d1001e9eeedb701b60e7bec55e797ef.png",alt:""}})]),s._v("\n最后，我们选择“使用下面的DNS的服务器地址”将DNS手动更改为114.114.114.114，即可解决问题")],1),s._v(" "),a("h2",{attrs:{id:"git-ls-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-ls-file"}},[s._v("#")]),s._v(" "),a("i",{staticClass:"fa fa-code-fork",attrs:{"aria-hidden":"true"}}),s._v(" git ls-file")]),s._v(" "),a("p",[s._v("查看index所有添加的文件")]),s._v(" "),a("h2",{attrs:{id:"git-switch-restore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-switch-restore"}},[s._v("#")]),s._v(" git switch/restore")]),s._v(" "),a("p",[s._v("Git的新版本2.23有一个特性非常引人瞩目，就是新版本的Git引入了两个新命令"),a("code",[s._v("git switch")]),s._v("和"),a("code",[s._v("git restore")]),s._v("，用以替代现在的"),a("code",[s._v("git checkout")]),s._v("。换言之，git checkout 将逐渐退出历史舞台。")]),s._v(" "),a("p",[s._v("Git社区决定这样做，是因为目前 git checkout 命令承载了太多的功能，这让新手们感到困惑。"),a("code",[s._v("git checkout")]),s._v("的核心功能包括两个方面，一个是分支的管理，一个是文件的恢复。这两个核心功能，未来将由"),a("code",[s._v("git switch")]),s._v("和"),a("code",[s._v("git restore")]),s._v("分别负责。")]),s._v(" "),a("blockquote",[a("p",[s._v("分支管理")])]),s._v(" "),a("p",[s._v("在分支管理方面，目前切换分支以及创建分支，是使用"),a("code",[s._v("git checkout <分支名>")]),s._v("和 "),a("code",[s._v("git checkout -b <分支名>")]),s._v(",对应的命令分别为"),a("code",[s._v("git switch <分支名>")]),s._v("和"),a("code",[s._v("git switch -c <分支名>")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git switch -c my-new-feature 0810beaed7\nSwitched to a new branch 'my-new-feature'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("代码还原")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git restore\ngit restore --stage\ngin reset head\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"git-review"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-review"}},[s._v("#")]),s._v(" git review")]),s._v(" "),a("p",[s._v("Gerrit/gitlab")]),s._v(" "),a("h2",{attrs:{id:"关于tree-ish、commit-ish"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于tree-ish、commit-ish"}},[s._v("#")]),s._v(" 关于tree-ish、Commit-ish")]),s._v(" "),a("h3",{attrs:{id:"commit-ish-tree-ish列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-ish-tree-ish列表"}},[s._v("#")]),s._v(" Commit-ish/Tree-ish列表")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("----------------------------------------------------------------------\n|    Commit-ish/Tree-ish    |                Examples\n----------------------------------------------------------------------\n|  1. <sha1>                | dae86e1950b1277e545cee180551750029cfe735\n|  2. <describeOutput>      | v1.7.4.2-679-g3bee7fb\n|  3. <refname>             | master, heads/master, refs/heads/master\n|  4. <refname>@{<date>}    | master@{yesterday}, HEAD@{5 minutes ago}\n|  5. <refname>@{<n>}       | master@{1}\n|  6. @{<n>}                | @{1}\n|  7. @{-<n>}               | @{-1}\n|  8. <refname>@{upstream}  | master@{upstream}, @{u}\n|  9. <rev>^                | HEAD^, v1.5.1^0\n| 10. <rev>~<n>             | master~3\n| 11. <rev>^{<type>}        | v0.99.8^{commit}\n| 12. <rev>^{}              | v0.99.8^{}\n| 13. <rev>^{/<text>}       | HEAD^{/fix nasty bug}\n| 14. :/<text>              | :/fix nasty bug\n----------------------------------------------------------------------\n|       Tree-ish only       |                Examples\n----------------------------------------------------------------------\n| 15. <rev>:<path>          | HEAD:README, :README, master:./README\n----------------------------------------------------------------------\n|         Tree-ish?         |                Examples\n----------------------------------------------------------------------\n| 16. :<n>:<path>           | :0:README, :README\n----------------------------------------------------------------------\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h3",{attrs:{id:"tree-commit-commit-ish-tree-ish"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-commit-commit-ish-tree-ish"}},[s._v("#")]),s._v(" tree/commit/commit-ish/tree-ish")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<tree>\nIndicates a tree object name.//表示一个tree对象的引用\n\n<commit>\nIndicates a commit object name.//表示一个commit对象的引用\n\n<tree-ish>\nIndicates a tree, commit or tag object name.\nA command that takes a <tree-ish> argument ultimately wants to operate on a <tree> object\nbut automatically dereferences <commit> and <tag> objects that point at a <tree>.\n//tree/commit/tagy引用指向tree对象的地址\n\n<commit-ish>\nIndicates a commit or tag object name.\nA command that takes a <commit-ish> argument ultimately wants to operate on a <commit> object\nbut automatically dereferences <tag> objects that point at a <commit>.\n//tree/commit/tagy引用指向commit对象的地址\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v("any identifier that leads to a commit object can also be used to lead to a (sub)directory tree object.")]),s._v(" "),a("p",[s._v("任何指向commit对象的标识也可以用于指tree对象")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("But since directory tree objects never point to commits in Git's versioning system, not every identifier that points to a (sub)directory tree can also be used to point to a commit.")]),s._v(" "),a("p",[s._v("由于根节点的tree对象不指向一个commit，但是指向一个commit引用可以指向一个tree")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v('the set of "commit-ish" identifiers is a strict subset of the set of "tree-ish" identifiers.')]),s._v(" "),a("p",[a("code",[s._v("commit-ish")]),s._v("标识符集合是"),a("code",[s._v("tree-ish")]),s._v("标识符集合的严格子集")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("The set of tree-ish identifiers that cannot be used as commit-ish are:")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("<rev>:<path>")]),s._v(", which leads directly to directory trees, not commit objects. For example, "),a("code",[s._v("HEAD:subdirectory")]),s._v(".")]),s._v(" "),a("li",[s._v("Sha1 identifiers of directory tree objects.")])]),s._v(" "),a("p",[s._v("tree-ish标识不能当做commit-ish的有以下情况：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("<rev>:<path>")]),s._v("直接指向一个tree不是一个提交,比如："),a("code",[s._v("HEAD:subdirectory")])]),s._v(" "),a("li",[s._v("tree对象的hash")])]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("以下浅俗易懂不翻译了：")]),s._v(" "),a("p",[s._v("A tree-ish is a way of naming a specific tree which can be one of the following:")]),s._v(" "),a("p",[s._v("References like:")]),s._v(" "),a("ul",[a("li",[s._v("HEAD")]),s._v(" "),a("li",[s._v("Tags")]),s._v(" "),a("li",[s._v("Branch names")]),s._v(" "),a("li",[s._v("Branch names with remotes, like origin/somebranch")]),s._v(" "),a("li",[s._v("Hash")]),s._v(" "),a("li",[s._v("Short hashes")])]),s._v(" "),a("p",[s._v("On top of that, any of the above can be appended with ^, ~. References can also use the @{} notation for some additional features:")]),s._v(" "),a("ul",[a("li",[s._v("HEAD^ or HEAD^1 will be resolved to the first parent of HEAD.")]),s._v(" "),a("li",[s._v("HEAD^2 will resolve to the second parent")]),s._v(" "),a("li",[s._v("HEAD^3 will resolve to the third parent and so on, which is more rare and product of merges with the octopus strategy.")]),s._v(" "),a("li",[s._v("HEAD~ or HEAD~1 will resolve to the first parent of head")]),s._v(" "),a("li",[s._v("HEAD~2 will resolve to the first parent of the first parent of HEAD. This would be the same as HEAD^^")]),s._v(" "),a("li",[s._v("HEAD@{0} will resolve to the current HEAD")]),s._v(" "),a("li",[s._v("HEAD@{1} will resolve to the previous head. This can only be used by references since it makes use of the reference log. In the case of HEAD every commit, merge, checkout will change the value of HEAD and thus add it to the log. git reflog HEAD will display the reference log where you can see all the movements of HEAD and properly what @{1} and so on will resolve to.")])]),s._v(" "),a("p",[s._v("Most of the above can be further combined as long as it makes sense in your repository, for example:")]),s._v(" "),a("ul",[a("li",[s._v("HEAD@{2}~3,")]),s._v(" "),a("li",[s._v("somebranch^2~4,")]),s._v(" "),a("li",[s._v("c00e66e~4^2,")]),s._v(" "),a("li",[s._v("anotherbranch~^~^~^.")])]),s._v(" "),a("p",[s._v("So any of the described above, and its combinations, is what is meant in the documentation as a tree-ish, which is just a way to say what tree (or revision) is the one that should be used for most of git commands.")]),s._v(" "),a("h3",{attrs:{id:"更多解释例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多解释例子"}},[s._v("#")]),s._v(" 更多解释例子")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("以下工作正常：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git archive master | tar -x -C ~/destination\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然而，下面就会报错"),a("code",[s._v("fatal not a valid object name")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git archive master/foo | tar -x -C ~/destination\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("git archive")]),s._v("官网文档写"),a("code",[s._v("<tree-ish> [path]")]),s._v("作为参数:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git archive <tree-ish> [path...]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果"),a("code",[s._v("master/foo")]),s._v("不是"),a("code",[s._v("tree-ish")]),s._v("，那是什么？")]),s._v(" "),a("p",[s._v("答：master:foo是树状的，但最好使用master foo，不能使用master/foo")]),s._v(" "),a("h2",{attrs:{id:"关于orig-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于orig-head"}},[s._v("#")]),s._v(" 关于ORIG_HEAD")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("官文说")]),s._v(" "),a("p",[s._v("HEAD is (direct or indirect, i.e. symbolic) reference to the current commit. It is a commit that you have checked in the working directory (unless you made some changes, or equivalent), and it is a commit on top of which “git commit” would make a new one. Usually HEAD is symbolic reference to some other named branch; this branch is currently checked out branch, or current branch. HEAD can also point directly to a commit; this state is called “detached HEAD”, and can be understood as being on unnamed, anonymous branch.")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("官文说")]),s._v(" "),a("p",[s._v("And @ alone is a shortcut for HEAD, since Git 1.8.5")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("官文说")]),s._v(" "),a("p",[s._v("ORIG_HEAD is previous state of HEAD, set by commands that have possibly dangerous behavior, to be easy to revert them. It is less useful now that Git has reflog: HEAD@{1} is roughly equivalent to ORIG_HEAD (HEAD@{1} is always last value of HEAD, ORIG_HEAD is last value of HEAD before dangerous operation).")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("官文说")]),s._v(" "),a("p",[s._v("For more information read git(1) manpage, Git User’s Manual, the Git Community Book and Git Glossary")])]),s._v(" "),a("p",[s._v("HEAD是指当前分支上当前的提交号。ORIG_HEAD 是指上一个HEAD所指向的提交号。这其实是两个指针，第二个指针的设计其实是为了做保护，一旦第一个指针被误操作了，还有机会去挽回。")]),s._v(" "),a("blockquote",[a("p",[s._v("实例")])]),s._v(" "),a("p",[s._v("将发生改变的文件 _config.yml加入index ：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git add _config.yml\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这样_config.yml 文件就被加入到index区域中，显示成：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Changes to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n        modified:   _config.yml\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("撤销上面的操作，恢复_config.yml为版本库中的状态：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git reset _config.yml\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这种用法相当于"),a("code",[s._v("<tree-ish>")]),s._v("的参数设置为HEAD。")]),s._v(" "),a("h2",{attrs:{id:"git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[s._v("#")]),s._v(" git reset")]),s._v(" "),a("ol",[a("li",[s._v("常用是")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("git reset head filename")]),s._v("//重置index,默认--mixed/-N")]),s._v(" "),a("li",[a("code",[s._v("git reset head~1 --soft")]),s._v("//移除commit,index和work不动")]),s._v(" "),a("li",[a("code",[s._v("git reset --hard reset commit")]),s._v("//还原到某个版本")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("温馨提示")]),s._v(" "),a("p",[s._v("hard重置index和工作区域，所有在这个"),a("code",[s._v("<commit>")]),s._v("之后的修改将被丢弃(包括未add和已add)。")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("git reset --keep")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("官文说")]),s._v(" "),a("p",[s._v("–-keep")]),s._v(" "),a("p",[s._v("Resets index entries and updates files in the working tree that are different between and HEAD.If a file that is different between and HEAD has local changes, reset is aborted.")])]),s._v(" "),a("p",[s._v("中文解释：")]),s._v(" "),a("p",[s._v("重置索引条目并更新工作树中 "),a("code",[s._v("<commit>")]),s._v(" 和 "),a("code",[s._v("HEAD")]),s._v(" 之间不同的文件。如果 "),a("code",[s._v("<commit>")]),s._v(" 和 "),a("code",[s._v("HEAD")]),s._v(" 之间的文件有本地更改，则重置会中止。")]),s._v(" "),a("p",[s._v("看起来是 保留工作区和HEAD之间的差异")]),s._v(" "),a("blockquote",[a("p",[s._v("实例演示：")])]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("git reset --keep HEAD")]),s._v("第一种情况：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-05-02_20-07-43.png",alt:""}})]),s._v(" "),a("center",[s._v("单个文件实例")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-05-02_19-54-45.png",alt:""}})]),s._v(" "),a("center",[s._v("两个文件实例")])],1)]),s._v(" "),a("li",[a("p",[a("code",[s._v("git reset --keep HEAD^")]),s._v("第二种情况:")])])]),s._v(" "),a("p",[s._v("如果 HEAD vs HEAD^ 有1.text或2.text修改提交, 命令将失败 ;")]),s._v(" "),a("p",[s._v("当上个提交两个文件都没修改时，该命令成功，工作区中保留了已add的1.text的diff和未add的2.text的diff修改，其它内容恢复到HEAD^; index复原成HEAD^")]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[s._v("git reset --merge")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("官文说")]),s._v(" "),a("p",[s._v("-–merge")]),s._v(" "),a("p",[s._v("Resets the index and updates the files in the working tree that are different between and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added). If a file that is different between and the index has unstaged changes, reset is aborted.")]),s._v(" "),a("p",[s._v("In other words, --merge does something like a git read-tree -u -m , but carries forward unmerged index entries.")])]),s._v(" "),a("p",[s._v("中文解释：")]),s._v(" "),a("p",[s._v("重置index并移除工作树中已add的那些文件和当前head之间不同diff，但保留没有add的更改的那些文件的diff。如果工作区和index对比有unstaged的diff，则会中止。")]),s._v(" "),a("p",[s._v("换句话说，"),a("code",[s._v("--merge")]),s._v(" 可以做一些类似的事情"),a("code",[s._v("git read-tree -u -m <commit>")]),s._v("，但是会传递未合并的索引条目。")]),s._v(" "),a("p",[s._v("看起来是 保留 工作区和index之间的差异")]),s._v(" "),a("blockquote",[a("p",[s._v("实例演示：注意文件修改情况")])]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("git reset --merge HEAD")]),s._v("第一种情况：\n"),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-05-02_19-01-08.png",alt:""}})]),s._v(" "),a("center",[s._v("单个文件实例")]),s._v(" "),a("center",[a("img",{attrs:{src:"/vuebloger/img/post/Snipaste_2020-05-02_18-58-05.png",alt:""}})]),s._v(" "),a("center",[s._v("两个文件实例")]),s._v("\n指定"),a("code",[s._v("--merge")]),s._v("保留工作区未add的diff。即工作区中保留了2.text未add的修改，将丢弃1.text已add的修改,; index复原成HEAD")],1)]),s._v(" "),a("li",[a("p",[a("code",[s._v("git reset --merge HEAD^")]),s._v("第二种情况:")]),s._v(" "),a("p",[a("code",[s._v("HEAD vs HEAD^")]),s._v("如果当前未add的文件有修改提交, 命令将失败。")]),s._v(" "),a("p",[s._v("成功的情况比如你add指定1.text后提交，这时这个提交2.text的更改没提交（版本库2.text没变），之后你再更改1.text再add,执行"),a("code",[s._v("git reset --merge HEAD^")]),s._v("后成功，2.text的更改保留，index和head更新到head^")]),s._v(" "),a("p",[s._v("即工作区中保留了2.text未add的修改，其它内容恢复到HEAD^; index复原成HEAD^")])])]),s._v(" "),a("blockquote",[a("p",[s._v("总结:")])]),s._v(" "),a("p",[a("code",[s._v("--merge")]),s._v(","),a("code",[s._v("--keep")]),s._v("这两个选项的效果是保留修改的差异部分。 如果回退的内容与保留的修改存在冲突(有相同文件)则命令会失败。然而基本都用不到^-^!")]),s._v(" "),a("h2",{attrs:{id:"关于gitbash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于gitbash"}},[s._v("#")]),s._v(" 关于gitbash")]),s._v(" "),a("h3",{attrs:{id:"更换bash主题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更换bash主题"}},[s._v("#")]),s._v(" 更换bash主题")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("vim ~/.bash_profile\n#//在此文件中插入下面这句\nexport PS1=\"\\\\u@windows:\\w\\$(__git_ps1 '(%s)')\\\"\nsource ~/.bash_profile\nexport PS1=\"\\[\\e[37;40m\\]\\[\\e[32;40m\\]\\u\\[\\e[37;40m\\]@\\W\\[\\e[33;40m\\]\\$(__git_ps1 ['%s'])\\[\\e[32;40m\\]\\$\\[\\e[0m\\] \"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"添加bash环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加bash环境变量"}},[s._v("#")]),s._v(" 添加bash环境变量")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export PATH=$PATH:新的路径     //把您要添加的路径写在$PATH:后面\nexport PATH=$PATH:$PWD/node_modules/.bin/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"git思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git思想"}},[s._v("#")]),s._v(" git思想")]),s._v(" "),a("p",[s._v("关于减少冲突注意点")]),s._v(" "),a("ol",[a("li",[s._v("规定时间段提交")]),s._v(" "),a("li",[s._v("按照任务相关性提交")]),s._v(" "),a("li",[s._v("远程pr及时合并")]),s._v(" "),a("li",[s._v("缩短分支寿命,分支寿命越长冲突风险越大,越早合并越好")]),s._v(" "),a("li",[s._v("下班前提交代码")])])])}),[],!1,null,null,null);t.default=n.exports}}]);